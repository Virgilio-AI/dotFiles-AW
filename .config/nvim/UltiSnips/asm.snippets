#sk
# inset - define in port
# outset - define out port
# in
# out
# +   - to add
# -   - to substract
# retButton - ratard for button
# display - for all numbers in display
# {#}d - for number in display
# if - similar to if
# goto - rjmp
snippet goto
rjmp ${1:name}
; name:
endsnippet

snippet if
	cpi ${1:register}, ${2:binary_Number}
	breq ${3:instruction}
endsnippet


snippet retButton
retardo:
	; ============================= 
	;    delay loop generator 
	;     5000 cycles:
	; ----------------------------- 
	; delaying 4998 cycles:
			  ldi  R18, \$07
	WGLOOP0:  ldi  R19, $ED
	WGLOOP1:  dec  R19
			  brne WGLOOP1
			  dec  R18
			  brne WGLOOP0
	; ----------------------------- 
	; delaying 2 cycles:
			  nop
			  nop
	; ============================= 

ret
endsnippet

snippet in
; name of the register to load info
in ${1:register}, pin${2:a-b-c-d}
endsnippet

snippet out
out port${1:a-b-c-d}, ${2:register}
endsnippet

snippet inset
; name of register has to be bigger than 16 for inmediate load
ldi ${1:name_of_register}, 0b0000_0000
out ddr${2:a-b-c-d}, $1
ldi $1, 0b1111_1111
out port$2, $1
endsnippet

snippet outset
; name of register must be bigger than 16
ldi ${1:name_of_register}, 0b1111_1111
out ddr${2:a-b-c-d}, $1
ldi $1,0b0000_0000
out port$2,$1
endsnippet


snippet info
; Fecha: `date +%d/%B/%Y\ -\ %A`
; Autor: Virgilio Murillo Ochoa
; personal github: Virgilio-AI
; linkedin: https://www.linkedin.com/in/virgilio-murillo-ochoa-b29b59203
; contact: virgiliomurilloochoa1@gmail.com
endsnippet

snippet sk
;******************************************************
; ${2:Titulo del proyecto}
;
; Fecha: `date +%d/%B/%Y\ -\ %A`
; Autor: Virgilio Murillo Ochoa
; github personal: Virgilio-AI
; contact: virgiliomurilloochoa1@gmail.com

; Miembros del equipo: Alfredo Castrellon
; $1

;******************************************************
.include "m16adef.inc"
;******************************************************
;Registros (aquí pueden definirse)
;.def temporal=r19
;Palabras claves (aquí pueden definirse)
;.equ LCD_DAT=DDRC
;******************************************************
.org 0x0000
;Comienza el vector de interrupciones.
jmp RESET ; Reset Handler
jmp EXT_INT0 ; IRQ0 Handler
jmp EXT_INT1 ; IRQ1 Handler
jmp TIM2_COMP ; Timer2 Compare Handler
jmp TIM2_OVF ; Timer2 Overflow Handler
jmp TIM1_CAPT ; Timer1 Capture Handler
jmp TIM1_COMPA ; Timer1 CompareA Handler
jmp TIM1_COMPB ; Timer1 CompareB Handler
jmp TIM1_OVF ; Timer1 Overflow Handler
jmp TIM0_OVF ; Timer0 Overflow Handler
jmp SPI_STC ; SPI Transfer Complete Handler
jmp USART_RXC ; USART RX Complete Handler
jmp USART_UDRE ; UDR Empty Handler
jmp USART_TXC ; USART TX Complete Handler
jmp ADC_COMP ; ADC Conversion Complete Handler
jmp EE_RDY ; EEPROM Ready Handler
jmp ANA_COMP ; Analog Comparator Handler
jmp TWSI ; Two-wire Serial Interface Handler
jmp EXT_INT2 ; IRQ2 Handler
jmp TIM0_COMP ; Timer0 Compare Handler
jmp SPM_RDY ; Store Program Memory Ready Handler
; Termina el vector de interrupciones.
;******************************************************
;Aquí comenzará el programa
;******************************************************
Reset:
;Primero inicializamos el stack pointer...
ldi r16, high(RAMEND)
out SPH, r16
ldi r16, low(RAMEND)
out SPL, r16 
;******************************************************
;No olvides configurar al inicio los puertos que utilizarás
;También debes configurar si habrá o no pull ups en las entradas
;Para las salidas deberás indicar cuál es la salida inicial
;Los registros que vayas a utilizar inicializalos si es necesario
;******************************************************
$3












;******************************************************
;Aquí están las rutinas para el manejo de las interrupciones concretas
;******************************************************

EXT_INT0: ; IRQ0 Handler
reti
EXT_INT1: 
reti ; IRQ1 Handler
TIM2_COMP: 
reti ; Timer2 Compare Handler
TIM2_OVF: 
reti ; Timer2 Overflow Handler
TIM1_CAPT: 
reti ; Timer1 Capture Handler
TIM1_COMPA: 
reti ; Timer1 CompareA Handler
TIM1_COMPB: 
reti ; Timer1 CompareB Handler
TIM1_OVF: 
reti ; Timer1 Overflow Handler
TIM0_OVF: 
reti ; Timer0 Overflow Handler
SPI_STC: 
reti ; SPI Transfer Complete Handler
USART_RXC: 
reti ; USART RX Complete Handler
USART_UDRE: 
reti ; UDR Empty Handler
USART_TXC: 
reti ; USART TX Complete Handler
ADC_COMP: 
reti ; ADC Conversion Complete Handler
EE_RDY: 
reti ; EEPROM Ready Handler
ANA_COMP: 
reti ; Analog Comparator Handler
TWSI: 
reti ; Two-wire Serial Interface Handler
EXT_INT2: 
reti ; IRQ2 Handler
TIM0_COMP: 
reti
SPM_RDY: 
reti ; Store Program Memory Ready Handler
endsnippet
snippet 0d
CERO:
	ldi ${1:register}, 0b1110_0111
	out port${2:a-b-c-d}, $1
	rjmp $3
endsnippet
snippet 1d
ONE:
	ldi ${1:register},0b0010_0001
	out port${2:a-b-c-d}, $1
	rjmp $3
endsnippet
snippet 2d
TWO:
	ldi ${1:register},0b1100_1011
	out port${2:a-b-c-d}, $1
	rjmp $3
endsnippet
snippet 3d
TREE:
	ldi ${1:register},0b0110_1011
	out port${2:a-b-c-d}, $1
	rjmp $3
endsnippet
snippet 4d
FOUR:
	ldi ${1:register},0b0010_1101
	out port${2:a-b-c-d}, $1
	rjmp $3
endsnippet
snippet 5d
FIVE:
	ldi ${1:register},0b0110_1110
	out port${2:a-b-c-d}, $1
	rjmp $3
endsnippet
snippet 6d
SIX:
	ldi ${1:register},0b1110_1110
	out port${2:a-b-c-d}, $1
	rjmp $3
endsnippet
snippet 7d
SEVEN:
	ldi ${1:register},0b0010_0011
	out port${2:a-b-c-d}, $1
	rjmp $3
endsnippet
snippet 8d
EIGHT:
	ldi ${1:register},0b1110_1111
	out port${2:a-b-c-d}, $1
	rjmp $3
endsnippet
snippet 9d
NINE:
	ldi ${1:register},0b0010_1111
	out port${2:a-b-c-d}, $1
	rjmp $3
endsnippet

snippet display
; ==============================
; ** definition of display
; ==============================
CERO:
	ldi ${1:register}, 0b1110_0111
	out port${2:a-b-c-d}, $1
	rjmp $3
ONE:
	ldi $1,0b0010_0001
	out port$2, $1
	rjmp $3
TWO:
	ldi $1,0b1100_1011
	out port$2, $1
	rjmp $3
TREE:
	ldi $1,0b0110_1011
	out port$2, $1
	rjmp $3
FOUR:
	ldi $1,0b0010_1101
	out port$2, $1
	rjmp $3
FIVE:
	ldi $1,0b0110_1110
	out port$2, $1
	rjmp $3
SIX:
	ldi $1,0b1110_1110
	out port$2, $1
	rjmp $3
SEVEN:
	ldi $1,0b0010_0011
	out port$2, $1
	rjmp $3
EIGHT:
	ldi $1,0b1110_1111
	out port$2, $1
	rjmp $3
NINE:
	ldi $1,0b0010_1111
	out port$2, $1
	rjmp $3
endsnippet



