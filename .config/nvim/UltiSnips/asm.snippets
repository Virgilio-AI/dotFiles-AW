#sk
# inset - define in port
# outset - define out port
# inp - for reading the whole port
# in - for reading a single pin
# out
# +   - to add
# -   - to substract
# retButton - ratard for button
# display - for all numbers in display
# {#}d - for number in display
# if - similar to if
# goto - rjmp
# traba - for retarding if the button is pressed
# var - alias for a register
# = - for info on asingnign 
# def - for definition of port pin or ddr
# teclado_menu - a menu template for keyboard
# delay_button -- retrado boton help

# displayButBinary -- display button binary 
# displayButproteus --- to display with buttons the way should it should
# displayButtonRaw -- display numbers when connecting manually

# interrupciones -- configuration for interruptions
# timers -- configurar los timers
snippet timers
; configure:
; ocr0
; TIFR
; TIMSK
; TCNT0
; TCCR0
endsnippet

snippet interrupciones
; command to set interruptions
sei
; cargamos al registro GICR para abilitar las interrupciones de forma individual
; general interrupt control register
; |int1|int0|int2|-|-|-|IVSEL|IVCE|
; default 0, 1 to enable interruptions
ldi r16, 0b${1:0}${2:0}${3:0}0_0000
out GICR, r16

; cargamos al registro GIFR
; general interrupt flag register
; |intf1|intf0|intf2|-|-|-|-|-|
; limpiados por default, 0=interruption in use; 1=default
ldi r16, 0b1110_0000
out GICR, r16

; cargamos al registro MCUCR
; configuracion de int0 y int1
; |sm2|se|sm1|isc11|isc10|isc01|isc00|
; same table with int1=isc11-isc10|int0=isc01-isc00|
; 0 0 -> low level 
; 0 1 -> any logical change
; 1 0 -> failing edge
; 1 1 -> rising edge
ldi r16, 0b_0000_${4:00}${5:00}
out MCUCR, r16

; cargamos el registro MCUCSR
; para configurar int2
; |JTD|ISC2|-|JTRF|WDRF|BORF|EXTRF|PORF|
; ISC2 == 1 : flanco de subida
; ISC2 == 0 : flanco de bajada
ldi r16,0b0${6:0}00_0000
out MCUCSR,r16

endsnippet

snippet delay_button
;megahertz = 1/frecuencia del micro en ms
; ejemplo:
; 2mhz 
; #ciclos = (50 mili second - 100 mili seconds)/(1/2mhz)
endsnippet

snippet teclado_menu
	ldi sendSignal, 0b1111_1111
	out PORT_TECLADO, sendSignal

	cbi PORT_TECLADO, 0
	nop
	nop

	sbis PIN_TECLADO, 4
		rjmp TECLADO_1
	sbis PIN_TECLADO, 5
		rjmp TECLADO_2
	sbis PIN_TECLADO, 6
		rjmp TECLADO_3

	sbi PORT_TECLADO, 0
	cbi PORT_TECLADO, 1
	nop
	nop

	sbis PIN_TECLADO, 4
		rjmp TECLADO_4
	sbis PIN_TECLADO, 5
		rjmp TECLADO_5
	sbis PIN_TECLADO, 6
		rjmp TECLADO_6

	sbi PORT_TECLADO, 1
	cbi PORT_TECLADO, 2
	nop
	nop

	sbis PIN_TECLADO, 4
		rjmp TECLADO_7
	sbis PIN_TECLADO, 5
		rjmp TECLADO_8
	sbis PIN_TECLADO, 6
		rjmp TECLADO_9

	sbi PORT_TECLADO, 2
	cbi PORT_TECLADO, 3
	nop
	nop

	sbis PIN_TECLADO, 5
		rjmp TECLADO_0
endsnippet


snippet def
.equ ${1:nombre}_ddr = ddr${2:a-b-c-d}
.equ $1_port = port$2
.equ $1_pin = pin$2
endsnippet

snippet =
; set value to cero before doing anything
; mov reg_target, second_reg
; ldi reg_target, numerical value
endsnippet

snippet traba
traba$1:
	; after the action of the button is done
	rcall retButton
	retenido$1:
		; name of the register to load info
		sbis ${3:pina-b-c-d}, ${2:number_of_pin} ; check if pin is set
			rjmp retenido$1
	rcall retButton
	${4:ret|jmp main}
endsnippet

snippet var
.def ${1:register_name} = ${2:register_number}
ldi $1, ${3:0b0000_0000|#|0x#}
endsnippet

snippet goto
rjmp ${1:name}
; name:
endsnippet

snippet if
cpi ${1:register}, ${2:binary_Number}
	breq $3
endsnippet


snippet retButton
retButton:
	; ============================= 
	;    delay loop generator 
	;     5000 cycles:
	; ----------------------------- 
	; delaying 4998 cycles:
			  ldi  t2, \$07
	WGLOOP0:  ldi  t1, $ED
	WGLOOP1:  dec  t1
			  brne WGLOOP1
			  dec  t2
			  brne WGLOOP0
	; ----------------------------- 
	; delaying 2 cycles:
			  nop
			  nop
	; ============================= 
ret
endsnippet

snippet inp
; name of the register to load info
ldi $1, 0
in ${1:register}, pin${2:a-b-c-d}
com $1
endsnippet

snippet in
sbis pin${1:a-b-c-d}, ${2:0-7} ; check if pin is set
	jmp ${3:function} ; always return to main in this function
endsnippet


snippet out
;set clear
${1:s-c}bi port${2:a-b-c-d}, ${3:number_of_pin}
endsnippet

snippet outp
out port${1:a-b-c-d}, ${2:register}
endsnippet

snippet inset
; input setting
; inmediate registers are bigger than 16
ldi r16, 0b0000_0000
out ddr${1:a-b-c-d}, r16
ldi r16, 0b1111_1111
out port$1, r16
endsnippet

snippet outset
; output setting
; name of register must be bigger than 16
ldi r16, 0b1111_1111
out ddr${1:a-b-c-d}, r16
ldi r16,0b0000_0000
out port$1,r16
endsnippet


snippet info
; Fecha: `date +%d/%B/%Y\ -\ %A`
; Autor: Virgilio Murillo Ochoa
; personal github: Virgilio-AI
; linkedin: https://www.linkedin.com/in/virgilio-murillo-ochoa-b29b59203
; contact: virgiliomurilloochoa1@gmail.com
endsnippet

snippet sk
;******************************************************
; ${2:Titulo del proyecto}
;
; Fecha: `date +%d/%B/%Y\ -\ %A`
; Autor: Virgilio Murillo Ochoa
; github personal: Virgilio-AI
; contact: virgiliomurilloochoa1@gmail.com

; Miembros del equipo: Alfredo Castrellon
; $1

;******************************************************
.include "m16def.inc"
;******************************************************
;Registros (aquí pueden definirse)
;.def temporal=r19
;Palabras claves (aquí pueden definirse)
;.equ LCD_DAT=DDRC
;******************************************************
.org 0x0000
;Comienza el vector de interrupciones.
jmp RESET ; Reset Handler
jmp EXT_INT0 ; IRQ0 Handler
jmp EXT_INT1 ; IRQ1 Handler
jmp TIM2_COMP ; Timer2 Compare Handler
jmp TIM2_OVF ; Timer2 Overflow Handler
jmp TIM1_CAPT ; Timer1 Capture Handler
jmp TIM1_COMPA ; Timer1 CompareA Handler
jmp TIM1_COMPB ; Timer1 CompareB Handler
jmp TIM1_OVF ; Timer1 Overflow Handler
jmp TIM0_OVF ; Timer0 Overflow Handler
jmp SPI_STC ; SPI Transfer Complete Handler
jmp USART_RXC ; USART RX Complete Handler
jmp USART_UDRE ; UDR Empty Handler
jmp USART_TXC ; USART TX Complete Handler
jmp ADC_COMP ; ADC Conversion Complete Handler
jmp EE_RDY ; EEPROM Ready Handler
jmp ANA_COMP ; Analog Comparator Handler
jmp TWSI ; Two-wire Serial Interface Handler
jmp EXT_INT2 ; IRQ2 Handler
jmp TIM0_COMP ; Timer0 Compare Handler
jmp SPM_RDY ; Store Program Memory Ready Handler
; Termina el vector de interrupciones.
;******************************************************
;Aquí comenzará el programa
;******************************************************
Reset:
;Primero inicializamos el stack pointer...
ldi r16, high(RAMEND)
out SPH, r16
ldi r16, low(RAMEND)
out SPL, r16 
;******************************************************
;No olvides configurar al inicio los puertos que utilizarás
;También debes configurar si habrá o no pull ups en las entradas
;Para las salidas deberás indicar cuál es la salida inicial
;Los registros que vayas a utilizar inicializalos si es necesario
;******************************************************


; ******* setting input output ******************  inset, outset
$3

; ************** definition of variables ********* var
.def t1 = r16
ldi t1,0
.def t2 = r17
ldi t2,0
; ************** actions to do at the beggining ***

; ************* main program **********************









;******************************************************
;Aquí están las rutinas para el manejo de las interrupciones concretas
;******************************************************

EXT_INT0: ; IRQ0 Handler
reti
EXT_INT1: 
reti ; IRQ1 Handler
TIM2_COMP: 
reti ; Timer2 Compare Handler
TIM2_OVF: 
reti ; Timer2 Overflow Handler
TIM1_CAPT: 
reti ; Timer1 Capture Handler
TIM1_COMPA: 
reti ; Timer1 CompareA Handler
TIM1_COMPB: 
reti ; Timer1 CompareB Handler
TIM1_OVF: 
reti ; Timer1 Overflow Handler
TIM0_OVF: 
reti ; Timer0 Overflow Handler
SPI_STC: 
reti ; SPI Transfer Complete Handler
USART_RXC: 
reti ; USART RX Complete Handler
USART_UDRE: 
reti ; UDR Empty Handler
USART_TXC: 
reti ; USART TX Complete Handler
ADC_COMP: 
reti ; ADC Conversion Complete Handler
EE_RDY: 
reti ; EEPROM Ready Handler
ANA_COMP: 
reti ; Analog Comparator Handler
TWSI: 
reti ; Two-wire Serial Interface Handler
EXT_INT2: 
reti ; IRQ2 Handler
TIM0_COMP: 
reti
SPM_RDY: 
reti ; Store Program Memory Ready Handler
endsnippet




snippet displayButBinary
; ============================
; ====== definition of display
; ============================
saltar_0:
rjmp sacar_0
saltar_1:
rjmp sacar_1
saltar_2:
rjmp sacar_2
saltar_3:
rjmp sacar_3
saltar_4:
rjmp sacar_4
saltar_5:
rjmp sacar_5
saltar_6:
rjmp sacar_6
saltar_7:
rjmp sacar_7
saltar_8:
rjmp sacar_8
saltar_9:
rjmp sacar_9
sacar_0$2:
	ldi t1, 0b0000_0000
	out port${1:-b-c-d}, t1
	; action to do if button is pressed
	
	; traba
	traba0:
		; after the action of the button is done
		rcall retButton
		retenido0:
			; name of the register to load info
			sbis pin${3:a-b-c-d}, ${4:0} ; check if pin is set
				rjmp retenido0
		rcall retButton
		${5:ret|jmp main}

sacar_1$2:
	ldi t1, 1
	out port$1, t1
	; action to do if button is pressed
	
	; traba
	traba1:
		; after the action of the button is done
		rcall retButton
		retenido1:
			; name of the register to load info
			sbis pin$3, $4 ; check if pin is set
				rjmp retenido1
		rcall retButton
		$5

sacar_2$2:
	ldi t1, 2
	out port$1, t1
	; action to do if button is pressed
	
	; traba
	traba2:
		; after the action of the button is done
		rcall retButton
		retenido2:
			; name of the register to load info
			sbis pin$3, $4 ; check if pin is set
				rjmp retenido2
		rcall retButton
		$5
sacar_3$2:
	ldi t1, 3
	out port$1, t1
	; action to do if button is pressed
	
	; traba
	traba3:
		; after the action of the button is done
		rcall retButton
		retenido3:
			; name of the register to load info
			sbis pin$3, $4 ; check if pin is set
				rjmp retenido3
		rcall retButton
		$5
sacar_4$2:
	ldi t1, 4
	out port$1, t1
	; action to do if button is pressed
	
	; traba
	traba4:
		; after the action of the button is done
		rcall retButton
		retenido4:
			; name of the register to load info
			sbis pin$3, $4 ; check if pin is set
				rjmp retenido4
		rcall retButton
		$5
sacar_5$2:
	ldi t1, 5
	out port$1, t1
	; action to do if button is pressed
	
	; traba
	traba5:
		; after the action of the button is done
		rcall retButton
		retenido5:
			; name of the register to load info
			sbis pin$3, $4 ; check if pin is set
				rjmp retenido5
		rcall retButton
		$5
sacar_6$2:
	ldi t1, 6
	out port$1, t1
	; action to do if button is pressed
	
	; traba
	traba6:
		; after the action of the button is done
		rcall retButton
		retenido6:
			; name of the register to load info
			sbis pin$3, $4 ; check if pin is set
				rjmp retenido6
		rcall retButton
		$5
sacar_7$2:
	ldi t1, 7
	out port$1, t1
	; action to do if button is pressed
	
	; traba
	traba7:
		; after the action of the button is done
		rcall retButton
		retenido7:
			; name of the register to load info
			sbis pin$3, $4 ; check if pin is set
				rjmp retenido7
		rcall retButton
		$5
sacar_8$2:
	ldi t1, 8
	out port$1, t1
	; action to do if button is pressed
	
	; traba
	traba8:
		; after the action of the button is done
		rcall retButton
		retenido8:
			; name of the register to load info
			sbis pin$3, $4 ; check if pin is set
				rjmp retenido8
		rcall retButton
		$5
sacar_9$2:
	ldi t1, 9
	out port$1, t1
	; action to do if button is pressed
	
	; traba
	traba9:
		; after the action of the button is done
		rcall retButton
		retenido9:
			; name of the register to load info
			sbis pin$3, $4 ; check if pin is set
				rjmp retenido9
		rcall retButton
		$5
endsnippet

snippet displayButproteus
; ============================
; ====== definition of display
; ============================
saltar_0:
rjmp sacar_0
saltar_1:
rjmp sacar_1
saltar_2:
rjmp sacar_2
saltar_3:
rjmp sacar_3
saltar_4:
rjmp sacar_4
saltar_5:
rjmp sacar_5
saltar_6:
rjmp sacar_6
saltar_7:
rjmp sacar_7
saltar_8:
rjmp sacar_8
saltar_9:
rjmp sacar_9
sacar_0$2:
	ldi t1,0b0011_1111
	out port${1:-b-c-d}, t1
	; action to do if button is pressed
	
	; traba
	traba0:
		; after the action of the button is done
		rcall retButton
		retenido0:
			; name of the register to load info
			sbis pin${3:a-b-c-d}, ${4:number_of_pin} ; check if pin is set
				rjmp retenido0
		rcall retButton
		${5:ret|jmp main}

sacar_1$2:
	ldi t1,0b000_0110
	out port$1, t1
	; action to do if button is pressed
	
	; traba
	traba1:
		; after the action of the button is done
		rcall retButton
		retenido1:
			; name of the register to load info
			sbis pin$3, $4 ; check if pin is set
				rjmp retenido1
		rcall retButton
		$5

sacar_2$2:
	ldi t1,0b0101_1011
	out port$1, t1
	; action to do if button is pressed
	
	; traba
	traba2:
		; after the action of the button is done
		rcall retButton
		retenido2:
			; name of the register to load info
			sbis pin$3, $4 ; check if pin is set
				rjmp retenido2
		rcall retButton
		$5
sacar_3$2:
	ldi t1,0b0100_1111
	out port$1, t1
	; action to do if button is pressed
	
	; traba
	traba3:
		; after the action of the button is done
		rcall retButton
		retenido3:
			; name of the register to load info
			sbis pin$3, $4 ; check if pin is set
				rjmp retenido3
		rcall retButton
		$5
sacar_4$2:
	ldi t1,0b0110_0110
	out port$1, t1
	; action to do if button is pressed
	
	; traba
	traba4:
		; after the action of the button is done
		rcall retButton
		retenido4:
			; name of the register to load info
			sbis pin$3, $4 ; check if pin is set
				rjmp retenido4
		rcall retButton
		$5
sacar_5$2:
	ldi t1,0b0110_1101
	out port$1, t1
	; action to do if button is pressed
	
	; traba
	traba5:
		; after the action of the button is done
		rcall retButton
		retenido5:
			; name of the register to load info
			sbis pin$3, $4 ; check if pin is set
				rjmp retenido5
		rcall retButton
		$5
sacar_6$2:
	ldi t1,0b0111_1101
	out port$1, t1
	; action to do if button is pressed
	
	; traba
	traba6:
		; after the action of the button is done
		rcall retButton
		retenido6:
			; name of the register to load info
			sbis pin$3, $4 ; check if pin is set
				rjmp retenido6
		rcall retButton
		$5
sacar_7$2:
	ldi t1,0b0000_0111
	out port$1, t1
	; action to do if button is pressed
	
	; traba
	traba7:
		; after the action of the button is done
		rcall retButton
		retenido7:
			; name of the register to load info
			sbis pin$3, $4 ; check if pin is set
				rjmp retenido7
		rcall retButton
		$5
sacar_8$2:
	ldi t1,0b0111_1111
	out port$1, t1
	; action to do if button is pressed
	
	; traba
	traba8:
		; after the action of the button is done
		rcall retButton
		retenido8:
			; name of the register to load info
			sbis pin$3, $4 ; check if pin is set
				rjmp retenido8
		rcall retButton
		$5
sacar_9$2:
	ldi t1,0b0110_1111
	out port$1, t1
	; action to do if button is pressed
	
	; traba
	traba9:
		; after the action of the button is done
		rcall retButton
		retenido9:
			; name of the register to load info
			sbis pin$3, $4 ; check if pin is set
				rjmp retenido9
		rcall retButton
		$5
endsnippet

snippet displayButRaw
; ============================
; ====== definition of display
; ============================
saltar_0:
rjmp sacar_0
saltar_1:
rjmp sacar_1
saltar_2:
rjmp sacar_2
saltar_3:
rjmp sacar_3
saltar_4:
rjmp sacar_4
saltar_5:
rjmp sacar_5
saltar_6:
rjmp sacar_6
saltar_7:
rjmp sacar_7
saltar_8:
rjmp sacar_8
saltar_9:
rjmp sacar_9

sacar_0$2:
	out port${1:-b-c-d}, t1
	; action to do if button is pressed
	
	; traba
	traba0:
		; after the action of the button is done
		rcall retButton
		retenido0:
			; name of the register to load info
			sbis pin${3:a-b-c-d}, ${4:number_of_pin} ; check if pin is set
				rjmp retenido0
		rcall retButton
		${5:ret|jmp main}

sacar_1$2:
	ldi t1,0b0100_1000
	out port$1, t1
	; action to do if button is pressed
	
	; traba
	traba1:
		; after the action of the button is done
		rcall retButton
		retenido1:
			; name of the register to load info
			sbis pin$3, $4 ; check if pin is set
				rjmp retenido1
		rcall retButton
		$5

sacar_2$2:
	ldi t1,0b0011_1101
	out port$1, t1
	; action to do if button is pressed
	
	; traba
	traba2:
		; after the action of the button is done
		rcall retButton
		retenido2:
			; name of the register to load info
			sbis pin$3, $4 ; check if pin is set
				rjmp retenido2
		rcall retButton
		$5
sacar_3$2:
	ldi t1,0b0110_1101
	out port$1, t1
	; action to do if button is pressed
	
	; traba
	traba3:
		; after the action of the button is done
		rcall retButton
		retenido3:
			; name of the register to load info
			sbis pin$3, $4 ; check if pin is set
				rjmp retenido3
		rcall retButton
		$5
sacar_4$2:
	ldi t1,0b0100_1011
	out port$1, t1
	; action to do if button is pressed
	
	; traba
	traba4:
		; after the action of the button is done
		rcall retButton
		retenido4:
			; name of the register to load info
			sbis pin$3, $4 ; check if pin is set
				rjmp retenido4
		rcall retButton
		$5
sacar_5$2:
	ldi t1,0b0110_0111
	out port$1, t1
	; action to do if button is pressed
	
	; traba
	traba5:
		; after the action of the button is done
		rcall retButton
		retenido5:
			; name of the register to load info
			sbis pin$3, $4 ; check if pin is set
				rjmp retenido5
		rcall retButton
		$5
sacar_6$2:
	ldi t1,0b0111_0011
	out port$1, t1
	; action to do if button is pressed
	
	; traba
	traba6:
		; after the action of the button is done
		rcall retButton
		retenido6:
			; name of the register to load info
			sbis pin$3, $4 ; check if pin is set
				rjmp retenido6
		rcall retButton
		$5
sacar_7$2:
	ldi t1,0b0100_1100
	out port$1, t1
	; action to do if button is pressed
	
	; traba
	traba7:
		; after the action of the button is done
		rcall retButton
		retenido7:
			; name of the register to load info
			sbis pin$3, $4 ; check if pin is set
				rjmp retenido7
		rcall retButton
		$5
sacar_8$2:
	ldi t1,0b0111_1111
	out port$1, t1
	; action to do if button is pressed
	
	; traba
	traba8:
		; after the action of the button is done
		rcall retButton
		retenido8:
			; name of the register to load info
			sbis pin$3, $4 ; check if pin is set
				rjmp retenido8
		rcall retButton
		$5
sacar_9$2:
	ldi t1,0b0100_1111
	out port$1, t1
	; action to do if button is pressed
	
	; traba
	traba9:
		; after the action of the button is done
		rcall retButton
		retenido9:
			; name of the register to load info
			sbis pin$3, $4 ; check if pin is set
				rjmp retenido9
		rcall retButton
		$5
endsnippet

