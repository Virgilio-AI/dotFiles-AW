#pyint
# ph -> ${placeholder}
# sp ->
# dn_ph -> for creating a snippet with dinamic place holders
# dn_config -> configurations for dinamic place hoders
snippet dn_config
global !p
def create_matrix_placeholders(snip):
	# Create anonymous snippet body
	anon_snippet_body = ""
	# Get start and end line number of expanded snippet
	start = snip.snippet_start[0]
	end = snip.snippet_end[0]
  # Append current line into anonymous snippet
	for i in range(start, end + 1):
		anon_snippet_body += snip.buffer[i]
		anon_snippet_body += "" if i == end else "\n"
	# Delete expanded snippet line till second to last line
	for i in range(start, end):
		del snip.buffer[start]
	# Empty last expanded snippet line while preserving the line
	snip.buffer[start] = ''
	# Expand anonymous snippet
	snip.expand_anon(anon_snippet_body)
endglobal
endsnippet

snippet dn_ph
post_jump "create_matrix_placeholders(snip)"
$1
post_jump "snip"
endsnippet

snippet ph
f"\${${1:placeholder}}"
endsnippet

snippet info
# Fecha: `date +%d/%B/%Y\ -\ %A`
# Autor: Virgilio Murillo Ochoa
# personal github: Virgilio-AI
# linkedin: https://www.linkedin.com/in/virgilio-murillo-ochoa-b29b59203
# contact: virgiliomurilloochoa1@gmail.com
endsnippet

snippet sk
# Fecha: `date +%d/%B/%Y\ -\ %A`
# Autor: Virgilio Murillo Ochoa
# personal github: Virgilio-AI
# linkedin: https://www.linkedin.com/in/virgilio-murillo-ochoa-b29b59203
# contact: virgiliomurilloochoa1@gmail.com
# ==========================
# ========== configurations ======
# ==========================
global !p
def create_matrix_placeholders(snip):
	# Create anonymous snippet body
	anon_snippet_body = ""
	# Get start and end line number of expanded snippet
	start = snip.snippet_start[0]
	end = snip.snippet_end[0]
  # Append current line into anonymous snippet
	for i in range(start, end + 1):
		anon_snippet_body += snip.buffer[i]
		anon_snippet_body += "" if i == end else "\n"
	# Delete expanded snippet line till second to last line
	for i in range(start, end):
		del snip.buffer[start]
	# Empty last expanded snippet line while preserving the line
	snip.buffer[start] = ''
	# Expand anonymous snippet
	snip.expand_anon(anon_snippet_body)
endglobal
post_jump "create_matrix_placeholders(snip)"
endsnippet

snippet sec
# ==========================
# ========== $1 ======
# ==========================
endsnippet

snippet python
\`!p
# match.group(#) for the current match
# snip.rv for the return value
snip.rv = ""
\`
endsnippet
# zsh snippets
snippet forFolder
# :h for name only
# :t for name with extension
for ${1:file} in ${2:\$1/*} ; do
	${3:echo "\$file:t" # for filename only}
done
endsnippet

snippet forstring
for ${1:char_it} in \$( echo \$${2:str} )
do
	$3
done
endsnippet
snippet if
if [[ $1 ]]
then
	$2
fi
endsnippet

snippet zsh
\`#!/usr/bin/zsh
$1\`
endsnippet

snippet vims
\`!v
\`
endsnippet
snippet visual
\${VISUAL}
endsnippet

snippet pythonScript
\`#!/usr/bin/python
$1\`
endsnippet
# python interpolation
snippet pyint
# for dinamic place holders just use
#"${placeholder}"
endsnippet

