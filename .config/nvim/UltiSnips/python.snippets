# ------------- global functions ------
# create matrix placeholders
# create matrix
# info
# --------------- gui's with tkiner ---- 
# s-gui
# gBut -- for a button
# gLab -- for a label
# gText -- for a text box with a description
# gDropMenu -- for a drop menu
# gImage -- for an image
# gGrid -- for help on grid
# gPack -- for help on pack
# gCheckButtons -- for adding check buttons
# gRadioButtons -- for crating radio buttons
# gOptionMenu -- for the menu in the top of the window
# gMainMenu -- for the main top menu
# gGridRemove -- for deleting an item grid
# gPackRemove -- for deleting a pack item
# gShow -- for showing all the packages
# gExitTkinter -- for exiting the program main loop



# ---------------   python
# ==== strings
# forString - for iterate string c style
# ins - insert variable into a string

# ==== data structures
# list - for creating a python list
# set - unordered collection of data type, no duplicate
# tuple - same to list but inmutable

# ==== files
# file_open - open a file and read it line by line
# file_write - write a file
# file_append -- for appending information into the file
# forFolder -- traverse all files in folder
# recurseFolder -- traverse all files and subdirectories in a folder
# fmkdir -- for creating a directory with parent directories
#table_name table_namemove_file -- for moving a file into other location
# relPath -- for getting the current relative path
# copy_file -- for file copy



# ==== POO
# POOHelp -- for help in POO
# inheritanceHelp -- for help in using inheritance

# ==== exception handling
# try -- to use generic try catch statement
# raise -- to create custom exception on condition


# ---------------   matplotlib
# plotcsv
# plot2dsk
# varrange
# xyaxis
# label
# title
# legend
# fill_between
# varlim
# 2dgrid
# closestPointInLineToPoint
# 3din2d
# plotPoint
# plotFunction

# ----------------    pandas
# plotcsv
# pcombinecsv
# dataDrop
# ----------------    system interaction

# shOutput
# shCommand
# notify-send
# execute sound
# newFolder-recursive

# ---------------- organization
# sec
# subsec

# ------------ python bases de datos


# sqlite3 --- for creating a connection to sqlite3
# sqlite3c -- for executing a command in sqlite3j
# mysql -- for creating a connection with mysql or mariadb 
# mysqlc -- for executing a command in the mysql connector
# mysqlq -- for getting the information from a query
# rowcount -- for getting the number of rows affected after  a commit
# encryption -- for encripting a password


# -------------- python django

# crateProject -- for creating a django project from scratch
# migrate -- for applying models.py file. create tables

# --- settings.py ------ MainProjectFolder
# createApp -- for creating a django app
# useMysql -- for using mysql
# changeLanguage -- for setting the default language in the project
# addContextProcessor -- these are used for global functions inside the html files

# --- urls.py --- MainProjectFolder
# importUrl -- for importing the url file from an other app into the main app
# imageRoute -- for using an image from a route

# --- views.py --- MainAppFolder

# viewsHelp -- for creating a help file
# login_page -- for creating a log in page
# log_out -- for logging out form a page
# register -- for registering user
# getSqlObject -- for getting an sql object

# --- apps.py --- MainAppFolder
# appsHelp -- for help on the apps.py file

# --- urls.py -- MainAppFolder
# urlsHelp -- for help in importing directories

# --- forms.py --- MainAppFolder
# forms_help -- for registering a user in the database


# --- layouts.html -- MainAppFolder/templates/layouts/
# html_template -- for using templates


# --- models.py --- SecondaryAppFolder
# django_createTable -- for creating a table for the app

# --- views.py --- SecondaryAppFolder
# loginRequired -- require login to acces a page

# --- admin -- SecondaryAppFolder
# modClassDisplay -- for modifications on the django panel search bar and many others
















# ==========================
# ========== BasesDeDatos ======
# ==========================

# sec - for creatign a new section
# -------- sql basic syntax
# ======== queries ========
# showUsers -- to show all users available in the server
# showAll -- for showing everything in a table
# describe -- for showing the rows of a table
# showCurUser -- for showing the current user
# bunion -- help for creating a union query
# bjoin -- help for creating a join query

# =========== databases ============
# createDatabase -- for creating a database
# deleteDatabase -- for deleting a database

# grantAll -- to grant all privileges to user over the database
# showPrivileges -- to show the privileges
# helpUsers -- to get help on the users

# ========== table modifications ========
# foreign -- for  a foreign key
# createTable -- for creating a table interactively
# deltable -- for deleting a table
# helpTable -- for help on the table creation and deletion
# ========== data modifications =========
# insert -- for inserting a new value into the table
# insertIfne -- for inserting a value if it doesn't exist
# update -- for updating the database



























# ==========================
# ========== global functions ======
# ==========================
global !p
def create_matrix_placeholders(snip):
	# Create anonymous snippet body
	anon_snippet_body = ""
	# Get start and end line number of expanded snippet
	start = snip.snippet_start[0]
	end = snip.snippet_end[0]
  # Append current line into anonymous snippet
	for i in range(start, end + 1):
		anon_snippet_body += snip.buffer[i]
		anon_snippet_body += "" if i == end else "\n"
	# Delete expanded snippet line till second to last line
	for i in range(start, end):
		del snip.buffer[start]
	# Empty last expanded snippet line while preserving the line
	snip.buffer[start] = ''
	# Expand anonymous snippet
	snip.expand_anon(anon_snippet_body)
endglobal
post_jump "snip"
global !p
def returnCommandSplitted(command):
	cmd_arr = command.split('_')
	return_command = ""
	for a in cmd_arr:
		return_command += a + " "
	return_command = return_command[0:len(return_command)-1]
	return return_command
endglobal

post_jump "snip"
global !p

def parseStatement(i,j,k,stri):
	prev = ''
	twoBehind=''
	ans = ""
	for ch in stri:

		if ( ch == 'k' or ch == 'i' or ch == 'j' )  and prev == '$' and twoBehind == '\\':
			ans = ans[:-2]
			ans+=ch

		elif ch == 'i' and prev == '$' and twoBehind != '\\':
			ans = ans[:-1]
			ans+=str(i)
		elif ch == 'j' and prev == '$' and twoBehind != '\\':
			ans = ans[:-1]
			ans+=str(j)
		elif ch == 'k' and prev == '$' and twoBehind != '\\':
			ans = ans[:-1]
			ans+=str(k)
		elif ch == 'n' and prev == '\\':
			ans = ans[:-1]
			ans+="\n"

		else :
			ans+=ch

		twoBehind = prev
		prev = ch
	return ans

endglobal

global !p
def getMatchArr():
	cont=1
	arr = []
	while 1 :
		try :
			arr.append(match.group(cont))
			cont+=1
		except :
			break
	return arr
endglobal







# ==========================
# ========== gui's with tkinter ======
# ==========================
# options im-> inword
snippet dropMenu "for creating a basic drop dow mwnu"
$3TypeLabel = Label(${4:frame},text="$3:")
$3TypeLabel.pack(side=TOP)

${1:name of list} = [
${2:"alarm",
"alert",
"zoom",
"circadian-alert",
"circadian-zoom",
"circadian-alarm"}
]

${3:name} = tk.StringVar()
$3.set($1[0]) # default value

$3DropMenu = OptionMenu($4, $3, *$1)
$3DropMenu.pack()

endsnippet
snippet s-gui
# pack is for piling elements and grid is like a spread sheet
root = Tk()
${1:frame} = Frame(root)
$1.${2:pack|grid}()
$3
root.mainloop()
endsnippet

snippet gBut
# opt parameters = fg="color",bg="color",command=lambda: function(params)
${1:name_of_button} = Button(${2:frame},text="$3").pack(side=${4:BUTTON|TOP|LEFT|RIGHT})
endsnippet

snippet gLab
# opt parameters = fg="color",bg="color"
${1:name_of_label} = Label(${2:frame},text="$3").pack(side=${4:BUTTON|TOP|LEFT|RIGHT})
endsnippet

snippet gText
$1Label = Label(level_add_task,text="$1:")
$1Label.pack(side=TOP)
# start entering information
$1 = tk.StringVar()
$1TextBox = tk.Entry(level_add_task, width = 50, textvariable = $1)
$1TextBox.pack(side=TOP)
endsnippet

snippet notify-send
os.system("notify-send \"$1\"")
endsnippet

# options im-> inword
snippet gImage "for loading image into a tkinter application"
# the render and the image variable may be lost in a function or a class,
# so make sure you save them somewhere otherwise you will lose them

image = Image.open(${1:path})
hsize = int((float(image.size[1])*float(wpercent)))
# resize the image acording to the witdh
image = image.resize(({1:basewidth},hsize), Image.ANTIALIAS)

render = ImageTk.PhotoImage(image)
self.img_arr.append((image,render))
# create the tkinter label and resize
img = Label(self.ventana,image=self.img_arr[-1][1])
# now just pack or grid the image

endsnippet


# options im-> inword
snippet gGrid "for grid in tkinter"
# row -- for the row position
# column -- for the column position
# rowspan -- for the number of rows it takes
# columnspan -- for the number of columns it takes
# sticky=N,S,W,E,NE,NW,SE,SW -- if the widget is smaller than the frame is says where it is going to stick to
endsnippet
# options im-> inword
snippet gPack "for the pack information"
# fill=X,Y -- to fill the entire window in the desired position
# expand=YES -- the widget fills the space in the parent widget
# side=BOTTOM,LEFT,RIGHT,UP -- to specify the side to be placed
endsnippet
# options im-> inword
snippet gRadioButtons "for creating radio buttons"
# $4 = StringVar()
${6:rbn} = Radiobutton(
	${1:ventana},
	text="${2:text}",
	value="${3:value}",
	variable=${4:variable},
	command=lambda: ${5:function(params)},
	)
# grid or pack
endsnippet # options im-> inword
snippet gCheckButtons "for check buttons"
# $3 = IntVar()
${5:cbn} = Checkbutton(
	${1:ventana},
	text="${2:text}",
	variable = ${3:variable},
	onvalue=1,
	offvalue=0,
	command=lambda: ${4:function(params)}
	)
# grid or pack
endsnippet

# options im-> inword
snippet gOptionMenu "for the option menu"
# $3 = StringVar()
${1:optionMenu_name} = OptionMenu(
	${2:ventana},
	${3:stringVar},
	${4:"opciones","separadas"}
	)
# pack or grid
endsnippet

# options im-> inword
snippet gDeleteItem "for deleting an item "
${1:name}.grid_remove()
endsnippet

# options im-> inword
snippet gPackRemove "for deleting a pack item"
${2:name}.pack_forget()
endsnippet

# options im-> inword
snippet gMainMenu "for adding the main menu"
${1:name} = Menu(${2:window})
# name.add_command(label="",command=lamda: command(params))
$2.config(menu=$1)
endsnippet
# options im-> inword
snippet gShow "for showing all the pacekd widgets in window"
${1:window}.mainloop()
endsnippet

# options im-> inword
snippet gExitTkinter "for exiting the main loop"
${1:ventana}.exit
endsnippet

# ==========================
# ========== Organization ======
# ==========================

snippet sec
# =============
# ==== $1 =====
# =============
endsnippet
snippet subsec
# ======== $1
endsnippet

snippet shOutput
${1:strinName}=str(subprocess.check_output([${2:list_commands}]).decode('utf-8'))
endsnippet
snippet shCommand
os.system('$1')
endsnippet

snippet dataDrop
${1:name_of_db}.drop(
labels=["name","example"],
axis=1, # 0 -> rows 1 -> columns
inplace=False # alter the dataFrame
)
endsnippet

# ==========================
# ========== python ======
# ==========================

snippet list
${1:temp} = [$2]
endsnippet

snippet forString
for element in range(0, len(${1:string_name})):
	print($1[element])
endsnippet

snippet set
${1:temp} = {$2}
endsnippet

snippet tuple
${1:temp} = ($2)
endsnippet

snippet ins "" im
"+str($1)+"
endsnippet
# ==========================
# ========== files ======
# ==========================
snippet file_open
with open('${1:file_name}') as ${2:file_var}:
	for line in $2:
		print(line.rstrip())
endsnippet

snippet file_write
# from io import open
${1:name} = open("${2:file}","w")
$1.write(${2:string})
$1.close()
endsnippet
# options im-> inword
snippet file_append "for appending text into a file"
# from io import open
${1:name} = open("${2:file}","a+")
$1.write(${2:string})
$1.close()
endsnippet

# options im-> inword
snippet forFolder "iteration of files over folder"
# iterate over files in
# that directory
for filename in os.listdir(directory):
	f = os.path.join(directory, filename)
# checking if it is a file
	if os.path.isfile(f):
		print(f)
endsnippet
# options im-> inword
snippet recurseFolder "to recurse a folder iteractively"
def recurseFolder(path):
	for filename in os.listdir(directory):
		f = os.path.join(path,filename)
	if os.path.isfile(f):
		print(f)
	else:
		recurseFolder(minusOne
endsnippet
# options im-> inword
snippet fmkdir "for creating a directory and it's parent directories"
# import pathlib
pathlib.Path(${1:abs_path}).mkdir(parents=True,exist_ok=True)
endsnippet
# options im-> inword
snippet move_file "for moving a file into other location"
# import shutil
shutil.move(${1:path_original},${2:path_target})
endsnippet
# options im-> inword
snippet copy_file "for copying a file into a new location"
# import shutil
shutil.copy(${1:path_original},${2:path_target})
endsnippet

# options im-> inword
snippet relPath "create a relative path"

# import pathlib


# create the directory creating the parents
relPath = str(pathlib.Path().absolute()) + "/"

# pathlib.Path(relPath + "/holaa").mkdir(parents=True, exist_ok=True)

# abrir
ruta = relPath  +"${1:relarivePath}"
endsnippet

# ==========================
# ========== POO ======
# ==========================
# options im-> inword
snippet POOHelp "for help information on POO with python"
# create files with a single class inside of them and import them into the main file
# example:
# create the class Car inside the car.py file
# import into the main file using 
# from car import Car
#
# and use it
# car = Car()
endsnippet

# options im-> inword
snippet inheritanceHelp "how to use inheritance in python"
# class name(fatherName)
# inside the __init__(self)
# super().__init__()
endsnippet

# ==========================
# ========== exception handling ======
# ==========================
# options im-> inword
snippet try "try catch generic"
try:
	$1
except Exception as e:
	$2
fianlly:
	$3
endsnippet
# options im-> inword
snippet raise "for raising custom exception"
if $1:
	raise $2("${3:text for exception}")
endsnippet


# ==========================
# ========== pandas ======
# ==========================

snippet plotcsv
${1:nombre} = "${2:path}"
$1_dt = pd.read_csv($1)
endsnippet

snippet plot2dsk
import matplotlib.pyplot as plt
import numpy as np

# varrange - for range and step
# varlim - for limit the min and max
# legend - for creating the legend of the different functions
# fill_between - to fill in between two functions
# closestPointInLineToPoint - creates a function for a point to be the closest
# 3din2d - to plot a 3d function into a 2d plane
# plotPoint - to plot a simple point
# plotFunction - to plot a simple function

# main parameters
x_lower_bound = $1
x_upper_bound = $2

y_lower_bound = $3
y_upper_bound = $4

#plot settings
plt.grid(True)

plt.xlim(x_lower_bound,x_upper_bound)
plt.ylim(y_lower_bound,y_upper_bound)
plt.hlines(0,x_lower_bound,x_upper_bound,color='k')
plt.vlines(0,y_lower_bound,y_upper_bound,color='k')
plt.xlabel('x1')
plt.xlabel('y1')
plt.title('Clase3Actividad4')
plt.xlabel('${5:x_label}')
plt.xlabel('${6:y_label}')
plt.title('$7')

endsnippet

snippet varrange
x = np.arange(${1:lower_bound},${2:upper_bound},${3:jump})
y = np.arange($4,$5,$6)
endsnippet


snippet xyaxis
plt.xlim(${1:lower_bound},${2:upper_bound})
plt.ylim(${3:lower_bound},${4:upper_bound})
endsnippet



snippet infoj
# %% [markdown]
- Date: 20/October/2021 - Wednesday
- Author: Virgilio Murillo Ochoa
- personal github: Virgilio-AI
- linkedin: https://www.linkedin.com/in/virgilio-murillo-ochoa-b29b59203
- contact: virgiliomurilloochoa1@gmail.com
endsnippet




snippet pcombinecsv
${1:name_of_files} = glob.glob("${2:PATH/TO/FILES/file*_.csv}")
${1}_dt = pd.concat)[pd.read_csv(f) for f in ${1} ])
endsnippet





snippet plotFunction
${1:x_var} = np.arange(${2:left_range},${3:right_range},${4:step})

plt.plot($1,${5:f(x)})
endsnippet

snippet plotPoint

plt.scatter(${1:x},${2:y})
endsnippet

snippet 3din2d
${1:x_var} = np.linspace(${2:x_lower_bound},${3:x_upper_bound},${4:step})
${5:y_var} = np.linspace(${6:y_lower_bound},${7:y_upper_bound},${8:step})
X_, Y_ = np.meshgrid($1, $5)
Z_ = mainFunction(X_, Y_)
plt.contour(X_,Y_,Z_,${9:number_of_curves})

endsnippet

snippet closestPointInLineToPoint
def getClosestPointToLine(p1,p2,p3):
	x1, y1 = p1
	x2, y2 = p2
	x3, y3 = p3
	dx, dy = x2-x1, y2-y1
	det = dx*dx + dy*dy
	a = (dy*(y3-y1)+dx*(x3-x1))/det
	return x1+a*dx, y1+a*dy
endsnippet

snippet 2dgrid
plt.grid(True)
endsnippet

snippet varlim
plt.xlim(${1:left_lim},${2:right_lim})
plt.ylim(${3:left_lim},${4:right_lim})
endsnippet


snippet fill_between

# here you have to identify the lower function and the bigger function
# you can use something like below
# botton = np.maximum(y1,0)

plt.fill_between(${1:function_1},${2:function_2},${3:function_3},where=${4:x_conditions} )
endsnippet

snippet title
plt.title('$1')
endsnippet

snippet legend
#pass a list and respect the order of the plots
# format (['f(x)','g(x)'])

plt.legend(['${1:function_mathematical_representation}$2'])
endsnippet


snippet label
plt.xlabel('${1:x_description}')
plt.xlabel('${2:y_description}')
endsnippet





snippet sk

# Date: `date +%d/%B/%Y\ -\ %A`
# Author: Virgilio Murillo Ochoa
# personal github: Virgilio-AI
# linkedin: https://www.linkedin.com/in/virgilio-murillo-ochoa-b29b59203
# contact: virgiliomurilloochoa1@gmail.com
from typing import *

endsnippet

snippet info
# Date: `date +%d/%B/%Y\ -\ %A`
# Author: Virgilio Murillo Ochoa
# personal github: Virgilio-AI
# linkedin: https://www.linkedin.com/in/virgilio-murillo-ochoa-b29b59203
# contact: virgiliomurilloochoa1@gmail.com
endsnippet



# ==========================
# ========== python bases de datos======
# ==========================
# options im-> inword
snippet sqlite3 "for connection into a sqlite3 database"
conexion = sqlite3.connect('pruebas.db')
endsnippet
# options im-> inword
snippet sqlite3c "for executing a command in sqlite3"

cursor = conexion.cursor()
command = """
"""
# execute command

cursor.execute(command)
# if query
# rows = cursor.fetchall()
# for row in rows():
#	print(row)
endsnippet


# options im-> inword
snippet mysql "for creating a connection to sql"
import mysql.connector

# conexion

database =  mysql.connector.connect(
		host="${1:localhost}",
		user = "$2",
		passwd="$3",
		database="${4:automation_suite}",
		)

endsnippet
# options im-> inword
snippet mysqlc "for executing a command"
cursor = database.cursor(buffered,True)

cursor.execute(${1:command})
# cursor.execute("string for formatted %s",tuple of values)
endsnippet
# options im-> inword
snippet mysqlq "for a query in mysql"
cursor.execute("${1:select * from Event ;}")
${2:rows} = cursor.fetchall()
endsnippet
# options im-> inword
snippet rowcount "for counting the affected rows by the commit"
#database.commit()
num = cursor.rowcount()
endsnippet

# options im-> inword
snippet encryption "for encripting a password"
# import hashlib
cifrado = hashlib.sha256()
cifrado.update(${1:string}.encode('utf8'))
endsnippet




# ==========================
# ========== python django ======
# ==========================

# options im-> inword
snippet createProject "for creating a django project"
# django-admin startproject mysite

endsnippet
# options im-> inword
snippet migrate "for creating a migration with databases"
# python manage.py makemigrations
# python manage.py sqlmigrate ${1:appName} ${2:migration_number ex:0001}
# python manage.py migrate

endsnippet
# options im-> inword
snippet createApp "for creating a django app"
# type in the terminal
python manage.py startapp polls

# in the main file settings.py add the name of the app in installed apps
# if apps.py is modified use the name in default_auto_field instead
INSTALLED_APPS = [
'$1'
]
endsnippet


# options im-> inword
snippet useMysql "for using mysql as default in django"
DATABASES = {
		'default': {
			'ENGINE' : 'django.db.backends.mysql',
			'NAME' : "django_course_second_project",
			'USER' : 'test_django',
			'PASSWORD' : '' ,
			'HOST' : 'localhost',
			'PORT' : ''
			}
		}
endsnippet

# options im-> inword
snippet changeLanguage "for changing the default language for the app"
# in the project settings
# LANGUAGE_CODE = 'en-en'
# LANGUAGE_CODE = 'en-es'

endsnippet

# options im-> inword
snippet addContextProcessor "these are used for global funcitons inside the html files"
# inside the main folder add in the TEMPLATES=[
'${1:appName}.${2:nameOfContext}.${3:name_of_function}

# and example would be

# def get_pages(request):
# 
# 	temp = Page.objects.values_list('id','title','slug','visible').order_by('order')
# 	pages = []
# 	for i in range(len(temp)):
# 		if temp[i][3] == True:
# 			pages.append(temp[i])
# 
# 
# 	return {
# 			'pages' : pages
# 			}

endsnippet




# options im-> inword
snippet importUrl "for importing the url file from an other app into the main app"
# from django.contrib import admin
# from django.urls import path,include
# from django.conf import settings
# 
# urlpatterns = [
# 	path('',include('${1:appName}.urls')),
# ]
endsnippet


# options im-> inword
snippet viewsHelp "for help in the views file"

# # for rendering html and to redirect into an other page
# from django.shortcuts import render,redirect
# # for poping messages
# from django.contrib import messages
# # for creating a user fast and easy
# from django.contrib.auth.forms import UserCreationForm
# # for creating a register form
# from MainApp.forms import RegisterForm
# # for loggin in and logging out
# from django.contrib.auth import authenticate,login,logout

# to create a view just add
def name_of_pages(request):
param1 = "param1"
return render(request,'path/inside/templates/folder',
{
	'param1_title':param1,
	'param2_title':"param2"
})
endsnippet

# options im-> inword
snippet login_page "for creating a basic login page"

# check the log in snippet for html

# def login_page(request):
# 
# 	if request.user.is_authenticated:
# 		return redirect('/inicio/')
# 	if request.method == 'POST':
# 		username = request.POST.get('username')
# 		password = request.POST.get('password')
# 
# 		user = authenticate(request,username = username,password = password)
# 
# 		if user is not None:
# 			login(request,user)
# 			return redirect('/inicio/')
# 		else:
# 			messages.warning(request,"no te has identificado correctamente")
# 
# 	return render(request,'users/login.html',{
# 		'title':'identificate'
# 		})

endsnippet


# options im-> inword
snippet log_out "for logging out from a page"

# def logout_user(request):
# 	logout(request)
# 	return redirect('login')

endsnippet

# options im-> inword
snippet appsHelp "for help on the MainAppFolder"
# from django.apps import AppConfig
# 
# 
# class MainappConfig(AppConfig):
# 	default_auto_field = 'django.db.models.BigAutoField'
# 	name = 'MainApp'
# then on the INSTALLED_APPS use the default_auto_field name
endsnippet

# options im-> inword
snippet urlsHelp "for help in importing directories"
# import the views from the same directorie

# from . import views
# from django.urls import path
#
# urlpatterns = [
#		path('inicio/',views.index,name='index'),
#		]

endsnippet

# options im-> inword
snippet forms_help "for registering a user in the database"
# from django import forms
# 
# from django.core import validators
# 
# from django.contrib.auth.forms import UserCreationForm
# from django.contrib.auth.models import User
# 
# class RegisterForm(UserCreationForm):
# 	class Meta:
# 		model = User
# 		fields = ['username','email','first_name','last_name','password1','password2']
endsnippet

# options im-> inword
snippet html_template "for creating an html template"
# inside the MainAppFolder
# create the folder templates/layouts/
# create the file layout.html and use the snippet html_template
# create the file static/css for the right design in the page


# create the pages app and inside it create the context_processors.py file
inside it place 

# from pages.models import Page
# 
# def get_pages(request):
# 
# 	temp = Page.objects.values_list('id','title','slug','visible').order_by('order')
# 	pages = []
# 	for i in range(len(temp)):
# 		if temp[i][3] == True:
# 			pages.append(temp[i])
# 
# 
# 	return {
# 			'pages' : pages
# 			}

to get the pages glbally for the whole project inside html files
endsnippet

# options im-> inword
snippet register "for registering "

# def register_page(request):
# 
# 	if request.user.is_authenticated:
# 		return redirect('/inicio/')
# 
# 	register_form = RegisterForm()
# 
# 	if request.method == 'POST':
# 		register_form = RegisterForm(request.POST)
# 		if register_form.is_valid():
# 			register_form.save()
# 			return redirect('/inicio/')
# 
# 
# 	return render(request,'users/register.html',{
# 		'title':"registro",
# 		'register_form':register_form
# 		})

# use the html snippet for registering
endsnippet

# options im-> inword
snippet getSqlObject "for getting an sql object"

# Create your views here.
from .models import ${1:the_table_class}

# inside a view
	${2:objectName} = $1.objects.get(${3:condition})
endsnippet

# options im-> inword
snippet django_createTable "for creating a table"

from ckeditor.fields import RichTextField
# import the user table
from django.contrib.auth.models import User

# # table named Category 
# class Category(models.Model):
# 	name = models.CharField(max_length=100,verbose_name="Nombre")
# 	description = models.CharField(max_length=255,verbose_name = "Description")
# 	created_at = models.DateTimeField(auto_now_add=True,verbose_name = "Descripción")
# 
# 	# the displayed information in django admin page
# 	class Meta:
# 		verbose_name = "Categoria"
# 		verbose_name_plural = "categorias"
# 	
# 	# the name to be printed
# 	def __str__(self):
# 		return self.name
# 
# class Article(models.Model):
# 	title = models.CharField(max_length=150,verbose_name="Título")
# 	content = RichTextField(verbose_name="Contenido")
# 	image = models.ImageField(default='null',verbose_name="Imagen",upload_to="articles")
# 	public = models.BooleanField(verbose_name="publicado?")
# 	# foreign key to create relationship many to one
# 	user = models.ForeignKey(User,editable=False,verbose_name="Usuario",on_delete=models.CASCADE)
# 	# many to many relationship between Category and Article
# 	categories = models.ManyToManyField(Category,verbose_name='Categorias',blank=True)
# 
# 	created_at = models.DateTimeField(auto_now_add=True,verbose_name="Creado el")
# 	updated_at = models.DateTimeField(auto_now=True,verbose_name="última actualización")
# 
# 
# 	class Meta:
# 		verbose_name = "Articulo"
# 		verbose_name_plural = "Artículos"
# 	
# 	def __str__(self):
# 		return self.title
endsnippet

# options im-> inword
snippet loginRequired "require a log in for a page"

from django.contrib.auth.decorators import login_required

@login_required(login_url="login")
# def page(request,slug):
# 	page = Page.objects.get(slug=slug)
# 	return render(request,"pages/page.html",{
# 		"page": page
# 		}
# )

endsnippet

# options im-> inword
snippet modClassDisplay "for modifications on the django panel search and many others"
# class CategoryAdmin(admin.ModelAdmin):
# 	readonly_fieds = ('created_at','updated_at')
# 	search_fields = ('name','description')
# 	list_display = ('name','created_at')
# class ArticleAdmin(admin.ModelAdmin):
# 	readonly_fieds = ('user','created_at','updated_at')
# 	search_fields = ('title','content','user__username','categories__name')
# 	list_display = ('title','user','public','created_at')
# 	list_filter = ('public','user__username','categories__name')

#

# 	def save_model(self,request,obj,form,change):
# 		if not obj.user_id:
# 			obj.user_id = request.user.id
# 		obj.save()

#

# admin.site.register(Category,CategoryAdmin)
# admin.site.register(Article,ArticleAdmin)



endsnippet



# ==========================
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ==========================

snippet insertIfne
-- insert query
insert into ${1:tableName}(${2:name,actionDescription}) values(${3:"alert","gives a personalized voice alert for the system"})
SELECT ${4:row_to_compare}
FROM $1
WHERE NOT($4 IN (SELECT $4 FROM $1));
endsnippet







snippet describe
describe $1 ;
endsnippet







# ==========================
# ========== sql basic syntax ======
# ==========================
snippet compHelp
-- <,>,<=,>=,=,
-- != equal <>
-- and,or
endsnippet

snippet wildCards
-- % -> A substitude for 0 or more characters
-- _ -> a substitude for a single character
-- [charlist] -> sets and ranges for characters to match
endsnippet

snippet bjoin
select ${1:table.col,table.col}
from table
join ${2:second_table}
on employee.id == branch.id;
-- left join if you want to see all
endsnippet
# ==========================
# ========== queries ======
# ==========================

snippet showTables
show tables ;
endsnippet
snippet showUsers
SELECT User FROM mysql.user ;
endsnippet

snippet showAll
select * from $1 ;
endsnippet

# options im-> inword
snippet showCurUser ""
select user() ;
endsnippet
# ==========================
# ========== databases ======
# ==========================

# options im-> inword
snippet createDatabase "for creating a database"
create database ${1:name_of_database} ;
endsnippet
# options im-> inword
snippet deleteDatabase "for deleting a database"
drop database ${1:is exists} ${2:name_of_database}
endsnippet
# options im-> inword
snippet grantAll "grant all privileges to user over database"
-- use it on the terminal as sudo
-- sudo mariadb
grant all privileges on ${1:database_name}.* to '${2:username}'@${3:localhost} ;
endsnippet
# options im-> inword
snippet showPrivileges "to show the privileges"
show grants for '${1:username}'@'${2:localhost} ;
endsnippet
# options im-> inword
snippet showColumn "for showing the specified column"
select ${1:list,of,columns}
from student
${2:[ order by (list of columns)]}
;
endsnippet

snippet columnConditions
-- select * 
-- from ${column}
-- where name in ('name1','name2')
-- limit 5;
endsnippet

snippet countVal
select count(${1:column})
from ${2:table}
-- [where conditions]
;
endsnippet

snippet average
select avg(${1:column})
from ${2:table}
-- [ where conditions]
-- [ group by column ]
endsnippet


# options im-> inword
snippet bunion "merge two queries into one"
-- select column
-- from employee
-- union
-- select branch_name
-- from branch
endsnippet
# options im-> inword
snippet helpUsers "for getting help on the users"
# the user that is been used when login normally is the '' user
endsnippet
# ==========================
# ========== table modifications ======
# ==========================

snippet foreign
foreign key (${1:name_of_key_in_this_table}) references ${2:foreign_table}(${3:value_in_foreing_table})
endsnippet

snippet createTable

create table if not exists ${1:table_name}(
	$2
);
endsnippet
# options im-> inword
snippet helpTable "for help on the table creating and deletion"

-- data types -> varchar(n),Int,DECIMAL(M,N),BLOB,DATE,TIMESTAMP,float
-- float is variable and decimal is fixed
-- use float always
-- constrains -> not null,unique,auto_increment,default 'val'
-- on delete -> on delete set null, on delete cascade
-- snippets -> foreign,

-- EXAMPLE
-- student_id INT,
-- name VARCHAR(20) not null,
-- major VARCHAR(20) unique,
-- primary key(student_id)
-- foreign key(student_id) references branch(branch_id) on delete cascade
endsnippet

snippet deltable
drop table ${1:table_name}
endsnippet

snippet addRow
alter table ${1:name_of_table} add ${2:name varchar(100)}
endsnippet

snippet modTable
-- alter table name_of_table
-- add foreign key(branch_id)
-- references branch(branch_id)
-- on delete set null;
endsnippet
# ==========================
# ========== data modification ======
# ==========================

snippet insert
insert into ${1:table_name}(${2:info,action,name,weeks,action_time,hour,minute}) values(${3:"test info","test action","test name",1,10,12,30}) ;
endsnippet

# options im-> inword
snippet update "update the data" 
-- see compHelp
update ${1:table_name}
set ${2:column_name} = ${3:value}
-- you can separate this by commas
-- ex: name='tom',name='jon'
where ${4:condition} ;
endsnippet

snippet deleteRow
-- to delete a row from the table
delete from ${1:name_of_table} where ${2:condition} ;
endsnippet
# ==========================
# ========== triggers ======
# ==========================

snippet trigger
create table ${1:trigger test} (
	message varchar(100)
	);
endsnippet


