# ------------- global functions ------
	# create matrix placeholders
	# create matrix
	# info
# --------------- gui's with tkinter ---- 
# figma -- for automatically creating tkinter from figma
# s-gui
# gBut -- for a button
# gLab -- for a label
# gText -- for a text box with a description
# gDropMenu -- for a drop menu
# gImage -- for an image
# gGrid -- for help on grid
# gPack -- for help on pack
# gCheckButtons -- for adding check buttons
# gRadioButtons -- for crating radio buttons
# gOptionMenu -- for the menu in the top of the window
# gMainMenu -- for the main top menu
# gGridRemove -- for deleting an item grid
# gPackRemove -- for deleting a pack item
# gShow -- for showing all the packages
# gExitTkinter -- for exiting the program main loop



# ---------------   python
# printCommands -- for pringting the commands available for a datatype or some other kind of object
# ==== strings
# forString - for iterate string c style
# ins - insert variable into a string

# ==== data structures
# list - for creating a python list
# sublist - for getting a sublist
# set - unordered collection of data type, no duplicate
# tuple - same to list but inmutable
# help -- for getting help
# dir -- for checking what to do with a variable type

# ==== files
# file_open - open a file and read it line by line
# file_write - write a file
# file_append -- for appending information into the file
# forFolder -- traverse all files in folder
# recurseFolder -- traverse all files and subdirectories in a folder
# fmkdir -- for creating a directory with parent directories
#table_name table_namemove_file -- for moving a file into other location
# relPath -- for getting the current relative path
# copy_file -- for file copy



# ==== POO
# POOHelp -- for help in POO
# inheritanceHelp -- for help in using inheritance

# ==== exception handling
# try -- to use generic try catch statement
# raise -- to create custom exception on condition


# ---------------   matplotlib
# plotcsv
# plot2dsk
# varrange
# xyaxis
# label
# title
# legend
# fill_between
# varlim
# 2dgrid
# closestPointInLineToPoint
# 3din2d
# plotPoint
# plotFunction

# ==========================
# ========== Kaggle ======
# ==========================
# loc_iloc -- for help on loc iloc
# import_pandas -- for importing pandas
# create_dataframe -- for creating a pandas dataframe
# create_series -- for creating a pandas series ( list of values)
# read_csv -- for reading a pandas csv
# csv_len -- for getting the length of the csv
# csv_head -- for getting the top five elements of the csv

# get_column -- for getting the column of a dataframe
# get_val -- for getting the value of the column and row
# get_row -- for getting the row of the pandas dataframe
# getRange_col -- for getting a range in a column
# getRange_row -- for getting a range in a row
# getRange_row_index -- for setting the index column for the dataframe 
# conditional_selection -- for getting a dataframe with a condition
# assignToColumn -- for assigning a value to a column
# columnDescription -- for getting the description of a column (mean, describe, etc)
# == Sumary functions and maps
# columnDescription --for getting the description of a column (mean, describe, etc)
# mapFunction -- for applying a basic function to all cells in a column
# applyFunction -- for applying a function to all the rows in a dataset
# == grouping and sorting
# group_by -- for grouping a dataframe by a column name
# sort_values -- to sort the values by a column name
# multiFunction -- for apply multiple functions to the group

# == data types and missing values
# datatype -- for getting the datatype of a column
# convertType -- for converting a data type of a column pandas
# NaN -- for managing Null values or Not a Number values
# rename -- for renaming the dataset
# combineDataframe -- for combining a dataframe

# == data cleaning
# fillWithNextToItVal -- for fill NaN values with the value that comes directly after it

# == scaling and normalization
# scaleData -- for scaling the used data
# normalizeData -- for normalizing the given data for a machine learning algoritm

# == parse dates in dataset
# parseDate -- for parsing a date

# == char encoding
# fileEncodingProblems -- for finding the file encoding
# encode -- for encoding a string

# == inconsistencies
# lookAndFix -- for looking and fixing inconsistencies
# fuuzyMatching -- for searching and replacing inconsistencies


# == graphs
# linePlot -- for plotting a line plot
# barChart -- for plotting a barChart
# heatMap -- for plotting a heat map
# scatterPlot -- for creating a scatter plot
# histogram -- for creating a histogram
# smoothedHistogram -- for creating a smoothed histogram
# 2dsmoothedhistogram -- for creating a smoothed 2d histogram
# setstyle -- for setting the style on the plot
















# ---------------    prevPandas
# plotcsv
# pcombinecsv
# dataDrop
# readcsv -- for reading a csv as a pandas dataframe
# describe -- for describing a pandas dataframe
# columns -- for getting the column names
# dropna -- to drop missing data in the dataset
# pd_y -- for setting the target column
# pd_x -- for setting the input columns
# split_validation -- for split validating a model
# model_descition_tree -- for using the model descition tree
# model_random_forest -- for using the random forest model
# getMAE -- for getting mean absolute error
# getBsetTreeSize -- basic code to loop through tree sizes
# export_csv -- for exporting a solution csv file


# ----------------    system interaction

# shOutput
# shCommand
# notify-send
# execute sound
# newFolder-recursive

# ---------------- organization
# sec
# subsec

# ------------ python bases de datos


# sqlite3 --- for creating a connection to sqlite3
# sqlite3c -- for executing a command in sqlite3j
# mysql -- for creating a connection with mysql or mariadb 
# mysqlc -- for executing a command in the mysql connector
# mysqlq -- for getting the information from a query
# rowcount -- for getting the number of rows affected after  a commit
# encryption -- for encripting a password


# -------------- python django

# crateProject -- for creating a django project from scratch
# migrate -- for applying models.py file. create tables
# commonPackages -- for a list of common packages for django



# --- settings.py ------ MainProjectFolder
# createApp -- for creating a django app
# useMysql -- for using mysql
# changeLanguage -- for setting the default language in the project
# addContextProcessor -- these are used for global functions inside the html files

# --- urls.py --- MainProjectFolder
# importUrl -- for importing the url file from an other app into the main app
# imageRoute -- for using an image from a route

# --- views.py --- MainAppFolder

# viewsHelp -- for creating a help file
# login_page -- for creating a log in page
# log_out -- for logging out form a page
# register -- for registering user
# getSqlObject -- for getting an sql object

# --- apps.py --- MainAppFolder
# appsHelp -- for help on the apps.py file

# --- urls.py -- MainAppFolder
# urlsHelp -- for help in importing directories

# --- forms.py --- MainAppFolder
# forms_help -- for registering a user in the database


# --- layouts.html -- MainAppFolder/templates/layouts/
# html_template -- for using templates


# --- models.py --- SecondaryAppFolder
# django_createTable -- for creating a table for the app

# --- views.py --- SecondaryAppFolder
# loginRequired -- require login to acces a page

# --- admin.py -- SecondaryAppFolder
# modClassDisplay -- for modifications on the django panel search bar and many others
















# ==========================
# ========== BasesDeDatos ======
# ==========================

# sec - for creatign a new section
# -------- sql basic syntax
# ======== queries ========
# showUsers -- to show all users available in the server
# showAll -- for showing everything in a table
# describe -- for showing the rows of a table
# showCurUser -- for showing the current user
# bunion -- help for creating a union query
# bjoin -- help for creating a join query

# =========== databases ============
# createDatabase -- for creating a database
# deleteDatabase -- for deleting a database

# grantAll -- to grant all privileges to user over the database
# showPrivileges -- to show the privileges
# helpUsers -- to get help on the users

# ========== table modifications ========
# foreign -- for  a foreign key
# createTable -- for creating a table interactively
# deltable -- for deleting a table
# helpTable -- for help on the table creation and deletion
# ========== data modifications =========
# insert -- for inserting a new value into the table
# insertIfne -- for inserting a value if it doesn't exist
# update -- for updating the database



























# ==========================
# ========== global functions ======
# ==========================
global !p
def create_matrix_placeholders(snip):
	# Create anonymous snippet body
	anon_snippet_body = ""
	# Get start and end line number of expanded snippet
	start = snip.snippet_start[0]
	end = snip.snippet_end[0]
  # Append current line into anonymous snippet
	for i in range(start, end + 1):
		anon_snippet_body += snip.buffer[i]
		anon_snippet_body += "" if i == end else "\n"
	# Delete expanded snippet line till second to last line
	for i in range(start, end):
		del snip.buffer[start]
	# Empty last expanded snippet line while preserving the line
	snip.buffer[start] = ''
	# Expand anonymous snippet
	snip.expand_anon(anon_snippet_body)
endglobal
post_jump "snip"
global !p
def returnCommandSplitted(command):
	cmd_arr = command.split('_')
	return_command = ""
	for a in cmd_arr:
		return_command += a + " "
	return_command = return_command[0:len(return_command)-1]
	return return_command
endglobal

post_jump "snip"
global !p

def parseStatement(i,j,k,stri):
	prev = ''
	twoBehind=''
	ans = ""
	for ch in stri:

		if ( ch == 'k' or ch == 'i' or ch == 'j' )  and prev == '$' and twoBehind == '\\':
			ans = ans[:-2]
			ans+=ch

		elif ch == 'i' and prev == '$' and twoBehind != '\\':
			ans = ans[:-1]
			ans+=str(i)
		elif ch == 'j' and prev == '$' and twoBehind != '\\':
			ans = ans[:-1]
			ans+=str(j)
		elif ch == 'k' and prev == '$' and twoBehind != '\\':
			ans = ans[:-1]
			ans+=str(k)
		elif ch == 'n' and prev == '\\':
			ans = ans[:-1]
			ans+="\n"

		else :
			ans+=ch

		twoBehind = prev
		prev = ch
	return ans

endglobal

global !p
def getMatchArr():
	cont=1
	arr = []
	while 1 :
		try :
			arr.append(match.group(cont))
			cont+=1
		except :
			break
	return arr
endglobal







# ==========================
# ========== gui's with tkinter ======
# ==========================
# options im-> inword
snippet dropMenu "for creating a basic drop dow mwnu"
$3TypeLabel = Label(${4:frame},text="$3:")
$3TypeLabel.pack(side=TOP)

${1:name of list} = [
${2:"alarm",
"alert",
"zoom",
"circadian-alert",
"circadian-zoom",
"circadian-alarm"}
]

${3:name} = tk.StringVar()
$3.set($1[0]) # default value

$3DropMenu = OptionMenu($4, $3, *$1)
$3DropMenu.pack()

endsnippet


# options im-> inword
snippet figma "for automatically creating tkinter from figma"
tkdesigner $FILE_URL $FIGMA_TOKEN
endsnippet
snippet s-gui
# pack is for piling elements and grid is like a spread sheet
root = Tk()
${1:frame} = Frame(root)
$1.${2:pack|grid}()
$3
root.mainloop()
endsnippet

snippet gBut
# opt parameters = fg="color",bg="color",command=lambda: function(params)
${1:name_of_button} = Button(${2:frame},text="$3").pack(side=${4:BUTTON|TOP|LEFT|RIGHT})
endsnippet

snippet gLab
# opt parameters = fg="color",bg="color"
${1:name_of_label} = Label(${2:frame},text="$3").pack(side=${4:BUTTON|TOP|LEFT|RIGHT})
endsnippet

snippet gText
$1Label = Label(level_add_task,text="$1:")
$1Label.pack(side=TOP)
# start entering information
$1 = tk.StringVar()
$1TextBox = tk.Entry(level_add_task, width = 50, textvariable = $1)
$1TextBox.pack(side=TOP)
endsnippet

snippet notify-send
os.system("notify-send \"$1\"")
endsnippet

# options im-> inword
snippet gImage "for loading image into a tkinter application"
# the render and the image variable may be lost in a function or a class,
# so make sure you save them somewhere otherwise you will lose them

image = Image.open(${1:path})
hsize = int((float(image.size[1])*float(wpercent)))
# resize the image acording to the witdh
image = image.resize(({1:basewidth},hsize), Image.ANTIALIAS)

render = ImageTk.PhotoImage(image)
self.img_arr.append((image,render))
# create the tkinter label and resize
img = Label(self.ventana,image=self.img_arr[-1][1])
# now just pack or grid the image

endsnippet


# options im-> inword
snippet gGrid "for grid in tkinter"
# row -- for the row position
# column -- for the column position
# rowspan -- for the number of rows it takes
# columnspan -- for the number of columns it takes
# sticky=N,S,W,E,NE,NW,SE,SW -- if the widget is smaller than the frame is says where it is going to stick to
endsnippet
# options im-> inword
snippet gPack "for the pack information"
# fill=X,Y -- to fill the entire window in the desired position
# expand=YES -- the widget fills the space in the parent widget
# side=BOTTOM,LEFT,RIGHT,UP -- to specify the side to be placed
endsnippet
# options im-> inword
snippet gRadioButtons "for creating radio buttons"
# $4 = StringVar()
${6:rbn} = Radiobutton(
	${1:ventana},
	text="${2:text}",
	value="${3:value}",
	variable=${4:variable},
	command=lambda: ${5:function(params)},
	)
# grid or pack
endsnippet # options im-> inword
snippet gCheckButtons "for check buttons"
# $3 = IntVar()
${5:cbn} = Checkbutton(
	${1:ventana},
	text="${2:text}",
	variable = ${3:variable},
	onvalue=1,
	offvalue=0,
	command=lambda: ${4:function(params)}
	)
# grid or pack
endsnippet

# options im-> inword
snippet gOptionMenu "for the option menu"
# $3 = StringVar()
${1:optionMenu_name} = OptionMenu(
	${2:ventana},
	${3:stringVar},
	${4:"opciones","separadas"}
	)
# pack or grid
endsnippet

# options im-> inword
snippet gDeleteItem "for deleting an item "
${1:name}.grid_remove()
endsnippet

# options im-> inword
snippet gPackRemove "for deleting a pack item"
${2:name}.pack_forget()
endsnippet

# options im-> inword
snippet gMainMenu "for adding the main menu"
${1:name} = Menu(${2:window})
# name.add_command(label="",command=lamda: command(params))
$2.config(menu=$1)
endsnippet
# options im-> inword
snippet gShow "for showing all the pacekd widgets in window"
${1:window}.mainloop()
endsnippet

# options im-> inword
snippet gExitTkinter "for exiting the main loop"
${1:ventana}.exit
endsnippet

# ==========================
# ========== Organization ======
# ==========================

snippet sec
# =============
# ==== $1 =====
# =============
endsnippet
snippet subsec
# ======== $1
endsnippet

snippet shOutput
${1:strinName}=str(subprocess.check_output([${2:list_commands}]).decode('utf-8'))
endsnippet
snippet shCommand
os.system('$1')
endsnippet

snippet dataDrop
${1:name_of_db}.drop(
labels=["name","example"],
axis=1, # 0 -> rows 1 -> columns
inplace=False # alter the dataFrame
)
endsnippet
# options im-> inword
snippet readCsv "for reading a pandas csv"
${2:name} = pd.read_csv(${1:path/to/csv.csv})


# for specific encoding
# kickstarter_2016 = pd.read_csv("../input/kickstarter-projects/ks-projects-201612.csv", encoding='Windows-1252')
endsnippet

# options im-> inword
snippet describe "for describing data"
${1:pandas_dataframe}.describe
endsnippet

# options im-> inword
snippet columns "for getting the column names in pandas"
${1:name}.columns
endsnippet

# options im-> inword
snippet pd_y "for setting the y variable"
y = ${1:data_frame}.${2:column_name}
endsnippet
# options im-> inword
snippet pd_x "for setting the X input variables"
x_column = [${1:'name1','name2'}]
X = ${2:data_frame}.x_column
endsnippet

# options im-> inword
snippet split_validation "for setting the split validation"
from sklearn.model_selection import train_test_split

# split data into training and validation data, for both features and target
# The split is based on a random number generator. Supplying a numeric value to
# the random_state argument guarantees we get the same split every time we
# run this script.
# X is the parameters given and y is the target
# random state is the seed for the train -- use the same seed for same results

train_X, val_X, train_y, val_y = train_test_split(X, y, random_state = 0)
# Define model
melbourne_model = DecisionTreeRegressor()
# Fit model
melbourne_model.fit(train_X, train_y)

# get predicted prices on validation data
val_predictions = melbourne_model.predict(val_X)
print(mean_absolute_error(val_y, val_predictions))
endsnippet

# options im-> inword
snippet model_descition_tree "for a basic model"
from sklearn.tree import DecisionTreeRegressor

# Define model. Specify a number for random_state to ensure same results each run
melbourne_model = DecisionTreeRegressor(random_state=1)
# X is the parameters and y is the target
# Fit model
melbourne_model.fit(X, y)

print("Making predictions for the following 5 houses:")
print(X.head())
print("The predictions are")
print(melbourne_model.predict(X.head()))
endsnippet

# options im-> inword
snippet model_random_forest "is the descition tree with randomness"
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error

# X is the parameters and y is the target
forest_model = RandomForestRegressor(random_state=1)
forest_model.fit(train_X, train_y)
melb_preds = forest_model.predict(val_X)
print(mean_absolute_error(val_y, melb_preds))
endsnippet

# options im-> inword
snippet getMAE "for getting the mean absolute error of a basic model"
# this is to get the error testing different size of tree (tree nodes)
# is meant to be used in a loop

def get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y):
	model = DecisionTreeRegressor(max_leaf_nodes=max_leaf_nodes, random_state=0)
	model.fit(train_X, train_y)
	preds_val = model.predict(val_X)
	mae = mean_absolute_error(val_y, preds_val)
	return(mae)
endsnippet

# options im-> inword
snippet getBestTreeSize "for getting the best tree size"
# these are just random numbers used for finding the correct tree size
# maybe a binary search can be apropiate

candidate_max_leaf_nodes = [5, 25, 50, 100, 250, 500]
# Write loop to find the ideal tree size from candidate_max_leaf_nodes
prev = float('inf')
tree_size = candidate_max_leaf_nodes[0]

for leaf_nodes in candidate_max_leaf_nodes:
	mae = get_mae(leaf_nodes,train_X,val_X,train_y,val_y)
	if(prev > mae):
		tree_size = leaf_nodes
		prev = mae

# Store the best value of max_leaf_nodes (it will be either 5, 25, 50, 100, 250 or 500)
best_tree_size = tree_size

endsnippet

# options im-> inword
snippet export_csv "for exporting a csv file"
# Run the code to save predictions in the format used for competition scoring

output = pd.DataFrame({'Id': test_data.Id,
	'SalePrice': test_preds})
output.to_csv('submission.csv', index=False)
endsnippet



# ==========================
# ========== python ======
# ==========================

snippet list
${1:temp} = [$2]
endsnippet

# options im-> inword
snippet sublist "for getting a sublist (slicing)"
# list[start:end+1:step]
endsnippet

# options im-> inword
snippet printCommands "for pringting the commands available for a datatype or some other kind of object"
for i in dir(${1:dataType}):
	if i[0] != '_' and "${2:keyword}" in i:
		print(i)
endsnippet

snippet forString
for element in range(0, len(${1:string_name})):
	print($1[element])
endsnippet

snippet set
${1:temp} = {$2}
endsnippet
# options im-> inword
snippet sublist "getting information on sublist"

endsnippet

snippet tuple
${1:temp} = ($2)
endsnippet

# options im-> inword
snippet help "for getting help"
help($1)
endsnippet

# options im-> inword
snippet dir "for getting information on a var type"
print(dir(rolls))
# where rolls is  a numpy.ndarray
endsnippet

snippet ins "" im
"+str($1)+"
endsnippet
# ==========================
# ========== files ======
# ==========================
snippet file_open
with open('${1:file_name}') as ${2:file_var}:
	for line in $2:
		print(line.rstrip())
endsnippet

snippet file_write
# from io import open
${1:name} = open("${2:file}","w")
$1.write(${2:string})
$1.close()
endsnippet
# options im-> inword
snippet file_append "for appending text into a file"
# from io import open
${1:name} = open("${2:file}","a+")
$1.write(${2:string})
$1.close()
endsnippet

# options im-> inword
snippet forFolder "iteration of files over folder"
# iterate over files in
# that directory
for filename in os.listdir(directory):
	f = os.path.join(directory, filename)
# checking if it is a file
	if os.path.isfile(f):
		print(f)
endsnippet
# options im-> inword
snippet recurseFolder "to recurse a folder iteractively"
def recurseFolder(path):
	for filename in os.listdir(directory):
		f = os.path.join(path,filename)
	if os.path.isfile(f):
		print(f)
	else:
		recurseFolder(minusOne
endsnippet
# options im-> inword
snippet fmkdir "for creating a directory and it's parent directories"
# import pathlib
pathlib.Path(${1:abs_path}).mkdir(parents=True,exist_ok=True)
endsnippet
# options im-> inword
snippet move_file "for moving a file into other location"
# import shutil
shutil.move(${1:path_original},${2:path_target})
endsnippet
# options im-> inword
snippet copy_file "for copying a file into a new location"
# import shutil
shutil.copy(${1:path_original},${2:path_target})
endsnippet

# options im-> inword
snippet relPath "create a relative path"

# import pathlib


# create the directory creating the parents
relPath = str(pathlib.Path().absolute()) + "/"

# pathlib.Path(relPath + "/holaa").mkdir(parents=True, exist_ok=True)

# abrir
ruta = relPath  +"${1:relarivePath}"
endsnippet

# ==========================
# ========== POO ======
# ==========================
# options im-> inword
snippet POOHelp "for help information on POO with python"
# create files with a single class inside of them and import them into the main file
# example:
# create the class Car inside the car.py file
# import into the main file using 
# from car import Car
#
# and use it
# car = Car()
endsnippet

# options im-> inword
snippet inheritanceHelp "how to use inheritance in python"
# class name(fatherName)
# inside the __init__(self)
# super().__init__()
endsnippet

# ==========================
# ========== exception handling ======
# ==========================
# options im-> inword
snippet try "try catch generic"
try:
	$1
except Exception as e:
	$2
fianlly:
	$3
endsnippet
# options im-> inword
snippet raise "for raising custom exception"
if $1:
	raise $2("${3:text for exception}")
endsnippet


# ==========================
# ========== pandas ======
# ==========================
# options im-> inword

# options im-> inword
snippet loc_iloc "for information on loc and iloc"
# the iloc if for using the integer position of the dataframe
# the loc is for using the label position on the dataframe
endsnippet
snippet import_pandas "for importing pandas"
import pandas as pd
endsnippet

# options im-> inword
snippet create_dataframe "for creating a pandas dataframe"
# optionales
# index=['idx1','idx2']
pd.DataFrame({'${1:col_name}':[${2:vals,separated,by,comman}]})
endsnippet

# options im-> inword
snippet create_series "for creating a pandas series ( list of values)"
# optionals
# index=['index1','index2', ... , 'index5'] -- to assigning a name to the indices
# name = "name of series" -- for assigning a name to the whole series
pd.Series([1, 2, 3, 4, 5])
endsnippet

# options im-> inword
snippet read_csv "for reading a pandas csv"
# optionals
# set the index col manually
# index_col=num
dt_name = pd.read_csv("path/to/file.csv")


# for specific encoding
# kickstarter_2016 = pd.read_csv("../input/kickstarter-projects/ks-projects-201612.csv", encoding='Windows-1252')

# for loading dates as index
# museum_data = pd.read_csv(museum_filepath,index_col="Date",parse_dates=True)

endsnippet
# options im-> inword
snippet csv_len "for getting the length of the csv"
dt_name.shape
endsnippet

# options im-> inword
snippet csv_head "for getting the top 5 elements of the csv"
dt_name.head()
endsnippet

# options im-> inword
snippet get_column "for getting the column of a dataframe"
# dataframe.title
# dataframe["title"]
endsnippet

# options im-> inword
snippet get_val "for getting the value of the column and row"
# dataframe["title"][num]
endsnippet

# options im-> inword
snippet get_row "for getting the row of the pandas dataframe"
#dataframe.iloc[index_num]
endsnippet


# options im-> inword
snippet getRange_col "for getting a range in a column"
# dataframe.loc[row_start:row_end,column]
# you can pass a list instead to get only the needed indices
# dataframe.loc[[1,2,3,4],[col1,col2]]
endsnippet

# options im-> inword
snippet getRange_row "for getting a range in a row"
# dataframe.iloc[start:end-1]

# also you can do
# museum_data.loc[first_slice_q:second_slice_q]
# because for dates it tends to work because you use a specific index and cannot be -1
endsnippet

# options im-> inword
snippet getRange_row_index "for getting a range of rows using the index"
# remember that loc takes the last element of the range unlike python
dataframe.loc[row_start:row_end,'index_name_1','index_name_2']
# you can use a list [1,2,5] instead of a range 1:2
endsnippet

# options im-> inword
snippet set_index "for setting the index column for the dataframe"
dataframe.set_index("title")
endsnippet

# options im-> inword
snippet conditional_selection "for getting a dataframe with a condition"
dataframe.loc[dataframe.title == "Italy"]
# optional
# dataframe.loc[dataframe.title.isin(['Italy','France'])]
# dataframe.loc[dataframe.title.notnull())]
# use always parenthesis since it tends to fail
# use & and | instead of and or
endsnippet

# options im-> inword
snippet assignToColumn "for assigning a value to a column"
dataframe['col_title'] = 'constant'
dataframe['col_title'] = range(len(dataframe),0,-1)
endsnippet

# options im-> inword
snippet columnDescription "for getting the column description"
# for getting general information on the dataframe
# dt_dataframe['col_name'].describe()
# for getting the mean needed
# dt_dataframe['col_name'].mean()
# for getting the unique values
# dt_dataframe['col_name'].unique()
# for getting the times each element appears in the list
# dt_dataframe['col_name'].value_counts()

endsnippet


# options im-> inword
snippet mapFunction "for applying a basic function to all cells in a column"
# column_mean = dataFrame.col_name.mean()
# also you can put a function instead of a lambda function
# dataFrame.col_name.map(lambda p: p - column_mean)

# also you can apply a operand like
# and it will be the same
# dataFrame.col_name - column_mean

# also < > ==  etc
# example:
# dataFrame.col_name + " - " + dataFrame.second_col_name
endsnippet


# options im-> inword
snippet applyFunction "for applying a function to all the rows in a dataset"
def function(row):
	row.col_name = row.col_name - 5
	return row

dataFrame.apply(function, axis='columns')
endsnippet





# options im-> inword
snippet group_by "for grouping a dataframe by a column name"
reviews.groupby(['col_name','col_name2']).apply(function,axis='columns')

# reset to normal index
# reviews.reset_index()
endsnippet

# options im-> inword
snippet sort_values "for sorting a pandas dataframe"
countries_reviewed.sort_values(by=['country', 'len'])
endsnippet


# options im-> inword
snippet multiFunction "to apply multiple funcitons to the dataframe"
# example

price_extremes = reviews.groupby('variety').price.agg([min, max])
endsnippet


# options im-> inword
snippet datatype "for getting the data type of a column"
reviews.price.dtype

# for getting all columns
reviews.dtypes
endsnippet

# options im-> inword
snippet convertType "for converting a data type of a column pandas"
reviews.points.astype('float64')
endsnippet

# options im-> inword
snippet NaN "for managing Null values or Not a Number values"
reviews[pd.isnull(reviews.country)]
reviews[pd.notnull(reviews.country)]
reviews.region_2.fillna("Unknown")

# also for replacing the values
reviews.taster_twitter_handle.replace("@kerinokeefe", "@kerino")
endsnippet

# options im-> inword
snippet rename "for renaming the dataset"
reviews.rename(columns={'points': 'score'})
reviews.rename(index={0: 'firstEntry', 1: 'secondEntry'})

reviews.rename_axis("wines", axis='rows').rename_axis("fields", axis='columns')


endsnippet


# options im-> inword
snippet combineDataframe "for combining a dataframe"
# when you have different dataframes with the same columns
pd.concat([canadian_youtube, british_youtube])


# combine dataframes that have an index in common
# where MeetID is the index in common and can be different
powerlifting_combined = powerlifting_meets.set_index("MeetID").join(powerlifting_competitors.set_index("MeetID"))
endsnippet


# options im-> inword
snippet fillWithNextToItVal "for fill NaN values with the value that comes directly after it"
sf_permits_with_na_imputed = sf_permits.fillna(method='bfill', axis=0)
endsnippet


# options im-> inword
snippet scalingData "for scaling the needed data"
## this is used to place the data in a matter of 0 - 1
# generate 1000 data points randomly drawn from an exponential distribution
original_data = np.random.exponential(size=1000)

# mix-max scale the data between 0 and 1
# where the columns are the list of columns to be normalized
scaled_data = minmax_scaling(original_data, columns=[0])
endsnippet

# options im-> inword
snippet normalizeData "for normalizing the given data for a machine learning algoritm"
# normalize the exponential data with boxcox
normalized_data = stats.boxcox(original_data)
endsnippet


# options im-> inword
snippet parseDate "for parsing a date"
# where pd is for pandas and landslides['date'] is the name of the column
landslides['date_parsed'] = pd.to_datetime(landslides['date'], format="%m/%d/%y")
endsnippet

# options im-> inword
snippet fileEncodingProblems "for finding the file encoding"
# get the byte size of the file to predict the needed file encoding
def getSize(fileobject):
	fileobject.seek(0,2) # move the cursor to the end of the file
	size = fileobject.tell()
	return size

file = open('../input/fatal-police-shootings-in-the-us/PoliceKillingsUS.csv', 'rb')
print( getSize(file))


# now replace with the number of bytes needed
with open("../input/fatal-police-shootings-in-the-us/PoliceKillingsUS.csv", 'rb') as rawdata:
	result = chardet.detect(rawdata.read(${1:number_of_bytes}))

# check what the character encoding might be
print(result)

# now replace the needed file encoding
police_killings = pd.read_csv("../input/fatal-police-shootings-in-the-us/PoliceKillingsUS.csv",encoding='Windows-1252')
endsnippet


# options im-> inword
snippet encode "for encoding a string"
# encode it to a different encoding, replacing characters that raise errors
after = before.encode("utf-8", errors="replace")
endsnippet


# options im-> inword
snippet lookAndFix "for looking and fixing the needed inconsistencies"
# get all the unique values in the 'Country' column
countries = professors['Country'].unique()

# sort them alphabetically and then take a closer look
countries.sort()
countries

# convert to lower case
professors['Country'] = professors['Country'].str.lower()
# remove trailing white spaces
professors['Country'] = professors['Country'].str.strip()

endsnippet

# options im-> inword
snippet fuuzyMatching "for searching and replacing inconsistencies "
# get the top 10 closest matches to "south korea"
matches = fuzzywuzzy.process.extract("south korea", countries, limit=10, scorer=fuzzywuzzy.fuzz.token_sort_ratio)

# take a look at them
matches
###################################
######################


# function to replace rows in the provided column of the provided dataframe
# that match the provided string above the provided ratio with the provided string
def replace_matches_in_column(df, column, string_to_match, min_ratio = 47):
# get a list of unique strings
	strings = df[column].unique()

# get the top 10 closest matches to our input string
matches = fuzzywuzzy.process.extract(string_to_match, strings, 
		limit=10, scorer=fuzzywuzzy.fuzz.token_sort_ratio)

# only get matches with a ratio > 90
	close_matches = [matches[0] for matches in matches if matches[1] >= min_ratio]

# get the rows of all the close matches in our dataframe
rows_with_matches = df[column].isin(close_matches)

# replace all rows with close matches with the input matches 
	df.loc[rows_with_matches, column] = string_to_match

# let us know the function's done
	print("All done!")

# use the function we just wrote to replace close matches to "south korea" with "south korea"
replace_matches_in_column(df=professors, column='Country', string_to_match="south korea")

endsnippet


# options im-> inword
snippet linePlot "for plotting a line plot"
# Set the width and height of the figure
# to set the plot figure size
plt.figure(figsize=(16,6))

# Line chart showing how FIFA rankings evolved over time 
# where data is the pandas dataframe
# this will plot all the columns as lines
sns.lineplot(data=fifa_data)


# to add a line to the plot just use the
# sns.lineplot(data=column)

plt.plot()
endsnippet

# options im-> inword
snippet barChart "for plotting a bar chart"
# Set the width and height of the figure
plt.figure(figsize=(10,6))

# Add title
plt.title("Average Arrival Delay for Spirit Airlines Flights, by Month")

# Bar chart showing average arrival delay for Spirit Airlines flights by month
sns.barplot(x=flight_data.index, y=flight_data['NK'])

# Add label for vertical axis
plt.ylabel("Arrival delay (in minutes)")
endsnippet

# options im-> inword
snippet heatMap "for plotting a heat map"
# Set the width and height of the figure
plt.figure(figsize=(14,7))

# Add title
plt.title("Average Arrival Delay for Each Airline, by Month")

# Heatmap showing average arrival delay for each airline by month
# annot for showing the values on each cell

# for the colors

cmap = matplotlib.colors.LinearSegmentedColormap.from_list("", ["red","violet","blue"])

# simply pass a list of colors if you want it to be discrete
# ex: ['red','blue']

sns.heatmap(data=flight_data, annot=True,cmap=cmap)




# Add label for horizontal axis
plt.xlabel("Airline")
endsnippet



# options im-> inword
snippet scatterPlot "for creating a scatter plot"


# Set the width and height of the figure
plt.figure(figsize=(14,7))

# note that the scatter plot should only be used once
# for creating a scatter plot
sns.scatterplot(x=insurance_data['bmi'], y=insurance_data['charges'])

# now for creating a regresion line plot
sns.regplot(x=insurance_data['bmi'], y=insurance_data['charges'])



# now for plotting multiple variables
sns.scatterplot(x=insurance_data['bmi'], y=insurance_data['charges'], hue=insurance_data['smoker'])

# sns.lmplot(x="bmi", y="charges", hue="smoker", data=insurance_data)

# also a variable is the swarm plot
sns.swarmplot(x=insurance_data['smoker'],y=insurance_data['charges'])
endsnippet

# options im-> inword
snippet histogram "for creating a histogram"
# Histograms for each species
sns.distplot(a=iris_set_data['Petal Length (cm)'], label="Iris-setosa", kde=False)
sns.distplot(a=iris_ver_data['Petal Length (cm)'], label="Iris-versicolor", kde=False)
sns.distplot(a=iris_vir_data['Petal Length (cm)'], label="Iris-virginica", kde=False)

# Add title
plt.title("Histogram of Petal Lengths, by Species")

# Force legend to appear
plt.legend()
endsnippet

# options im-> inword
snippet smoothedHistogram "for creating a smoothed histogram"
# KDE plots for each species
sns.kdeplot(data=iris_set_data['Petal Length (cm)'], label="Iris-setosa", shade=True)
sns.kdeplot(data=iris_ver_data['Petal Length (cm)'], label="Iris-versicolor", shade=True)
sns.kdeplot(data=iris_vir_data['Petal Length (cm)'], label="Iris-virginica", shade=True)

# Add title
plt.title("Distribution of Petal Lengths, by Species")
endsnippet

# options im-> inword
snippet 2dsmoothedhistogram "for a 2d smoothed histogram"
# 2D KDE plot
sns.jointplot(x=iris_data['Petal Length (cm)'], y=iris_data['Sepal Width (cm)'], kind="kde")
endsnippet

# options im-> inword
snippet setstyle "for setting the style"
sns.set_style("dark")
endsnippet





# ==========================
# ========== prevPandas ======
# ==========================

snippet plotcsv

${1:nombre} = "${2:path}"
$1_dt = pd.read_csv($1)

endsnippet

snippet plot2dsk
import matplotlib.pyplot as plt
import numpy as np

# varrange - for range and step
# varlim - for limit the min and max
# legend - for creating the legend of the different functions
# fill_between - to fill in between two functions
# closestPointInLineToPoint - creates a function for a point to be the closest
# 3din2d - to plot a 3d function into a 2d plane
# plotPoint - to plot a simple point
# plotFunction - to plot a simple function

# main parameters
x_lower_bound = $1
x_upper_bound = $2

y_lower_bound = $3
y_upper_bound = $4

#plot settings
plt.grid(True)

plt.xlim(x_lower_bound,x_upper_bound)
plt.ylim(y_lower_bound,y_upper_bound)
plt.hlines(0,x_lower_bound,x_upper_bound,color='k')
plt.vlines(0,y_lower_bound,y_upper_bound,color='k')
plt.xlabel('x1')
plt.xlabel('y1')
plt.title('Clase3Actividad4')
plt.xlabel('${5:x_label}')
plt.xlabel('${6:y_label}')
plt.title('$7')

endsnippet

snippet varrange
x = np.arange(${1:lower_bound},${2:upper_bound},${3:jump})
y = np.arange($4,$5,$6)
endsnippet


snippet xyaxis
plt.xlim(${1:lower_bound},${2:upper_bound})
plt.ylim(${3:lower_bound},${4:upper_bound})
endsnippet



snippet infoj
# %% [markdown]
- Date: 20/October/2021 - Wednesday
- Author: Virgilio Murillo Ochoa
- personal github: Virgilio-AI
- linkedin: https://www.linkedin.com/in/virgilio-murillo-ochoa-b29b59203
- contact: virgiliomurilloochoa1@gmail.com
- web: virgiliomurillo.com
endsnippet




snippet pcombinecsv
${1:name_of_files} = glob.glob("${2:PATH/TO/FILES/file*_.csv}")
${1}_dt = pd.concat)[pd.read_csv(f) for f in ${1} ])
endsnippet





snippet plotFunction
${1:x_var} = np.arange(${2:left_range},${3:right_range},${4:step})

plt.plot($1,${5:f(x)})
endsnippet

snippet plotPoint

plt.scatter(${1:x},${2:y})
endsnippet

snippet 3din2d
${1:x_var} = np.linspace(${2:x_lower_bound},${3:x_upper_bound},${4:step})
${5:y_var} = np.linspace(${6:y_lower_bound},${7:y_upper_bound},${8:step})
X_, Y_ = np.meshgrid($1, $5)
Z_ = mainFunction(X_, Y_)
plt.contour(X_,Y_,Z_,${9:number_of_curves})

endsnippet

snippet closestPointInLineToPoint
def getClosestPointToLine(p1,p2,p3):
	x1, y1 = p1
	x2, y2 = p2
	x3, y3 = p3
	dx, dy = x2-x1, y2-y1
	det = dx*dx + dy*dy
	a = (dy*(y3-y1)+dx*(x3-x1))/det
	return x1+a*dx, y1+a*dy
endsnippet

snippet 2dgrid
plt.grid(True)
endsnippet

snippet varlim
plt.xlim(${1:left_lim},${2:right_lim})
plt.ylim(${3:left_lim},${4:right_lim})
endsnippet


snippet fill_between

# here you have to identify the lower function and the bigger function
# you can use something like below
# botton = np.maximum(y1,0)

plt.fill_between(${1:function_1},${2:function_2},${3:function_3},where=${4:x_conditions} )
endsnippet

snippet title
plt.title('$1')
endsnippet

snippet legend
#pass a list and respect the order of the plots
# format (['f(x)','g(x)'])

plt.legend(['${1:function_mathematical_representation}$2'])
endsnippet


snippet label
plt.xlabel('${1:x_description}')
plt.xlabel('${2:y_description}')
endsnippet





snippet sk

# Date: `date +%d/%B/%Y\ -\ %A`
# Author: Virgilio Murillo Ochoa
# personal github: Virgilio-AI
# linkedin: https://www.linkedin.com/in/virgilio-murillo-ochoa-b29b59203
# contact: virgiliomurilloochoa1@gmail.com
# web: virgiliomurillo.com

from typing import *
import heapq as hp
from collections import deque

# set = set() # .remove(val),.add(val)
# dic = {} # .remove(id),dic[key] = val
# arr = []

endsnippet

snippet info
# Date: `date +%d/%B/%Y\ -\ %A`
# Author: Virgilio Murillo Ochoa
# personal github: Virgilio-AI
# linkedin: https://www.linkedin.com/in/virgilio-murillo-ochoa-b29b59203
# contact: virgiliomurilloochoa1@gmail.com
# web: virgiliomurillo.com
endsnippet



# ==========================
# ========== python bases de datos======
# ==========================
# options im-> inword
snippet sqlite3 "for connection into a sqlite3 database"
conexion = sqlite3.connect('pruebas.db')
endsnippet
# options im-> inword
snippet sqlite3c "for executing a command in sqlite3"

cursor = conexion.cursor()
command = """
"""
# execute command

cursor.execute(command)
# if query
# rows = cursor.fetchall()
# for row in rows():
#	print(row)
endsnippet


# options im-> inword
snippet mysql "for creating a connection to sql"
import mysql.connector

# conexion

database =  mysql.connector.connect(
		host="${1:localhost}",
		user = "$2",
		passwd="$3",
		database="${4:automation_suite}",
		)

endsnippet
# options im-> inword
snippet mysqlc "for executing a command"
cursor = database.cursor(buffered,True)

cursor.execute(${1:command})
# cursor.execute("string for formatted %s",tuple of values)
endsnippet
# options im-> inword
snippet mysqlq "for a query in mysql"
cursor.execute("${1:select * from Event ;}")
${2:rows} = cursor.fetchall()
endsnippet
# options im-> inword
snippet rowcount "for counting the affected rows by the commit"
#database.commit()
num = cursor.rowcount()
endsnippet

# options im-> inword
snippet encryption "for encripting a password"
# import hashlib
cifrado = hashlib.sha256()
cifrado.update(${1:string}.encode('utf8'))
endsnippet




# ==========================
# ========== python django ======
# ==========================

# options im-> inword
snippet createProject "for creating a django project"
# django-admin startproject mysite

endsnippet
# options im-> inword
snippet migrate "for creating a migration with databases"
# python manage.py makemigrations
# python manage.py sqlmigrate ${1:appName} ${2:migration_number ex:0001}
# python manage.py migrate

endsnippet
# options im-> inword
snippet commonPackages "for a list of common package"
django-ckeditor
mysqlclient
pillow
endsnippet
# options im-> inword
snippet createApp "for creating a django app"
# type in the terminal
python manage.py startapp polls

# in the main file settings.py add the name of the app in installed apps
# if apps.py is modified use the name in default_auto_field instead
INSTALLED_APPS = [
'$1'
]
endsnippet


# options im-> inword
snippet useMysql "for using mysql as default in django"
DATABASES = {
		'default': {
			'ENGINE' : 'django.db.backends.mysql',
			'NAME' : "django_course_second_project",
			'USER' : 'test_django',
			'PASSWORD' : '' ,
			'HOST' : 'localhost',
			'PORT' : ''
			}
		}
endsnippet

# options im-> inword
snippet changeLanguage "for changing the default language for the app"
# in the project settings
# LANGUAGE_CODE = 'en-en'
# LANGUAGE_CODE = 'en-es'

endsnippet

# options im-> inword
snippet addContextProcessor "these are used for global funcitons inside the html files"
# inside the main folder add in the TEMPLATES=[
'${1:appName}.${2:nameOfContext}.${3:name_of_function}

# and example would be

# def get_pages(request):
# 
# 	temp = Page.objects.values_list('id','title','slug','visible').order_by('order')
# 	pages = []
# 	for i in range(len(temp)):
# 		if temp[i][3] == True:
# 			pages.append(temp[i])
# 
# 
# 	return {
# 			'pages' : pages
# 			}

endsnippet




# options im-> inword
snippet importUrl "for importing the url file from an other app into the main app"
# from django.contrib import admin
# from django.urls import path,include
# from django.conf import settings
# 
# urlpatterns = [
# 	path('',include('${1:appName}.urls')),
# ]
endsnippet


# options im-> inword
snippet viewsHelp "for help in the views file"

# # for rendering html and to redirect into an other page
# from django.shortcuts import render,redirect
# # for poping messages
# from django.contrib import messages
# # for creating a user fast and easy
# from django.contrib.auth.forms import UserCreationForm
# # for creating a register form
# from MainApp.forms import RegisterForm
# # for loggin in and logging out
# from django.contrib.auth import authenticate,login,logout

# to create a view just add
def name_of_pages(request):
param1 = "param1"
return render(request,'path/inside/templates/folder',
{
	'param1_title':param1,
	'param2_title':"param2"
})

# for python tag interpolation use {{ var|safe }}
endsnippet

# options im-> inword
snippet login_page "for creating a basic login page"

# check the log in snippet for html

#from django.shortcuts import render, redirect
#from django.contrib.auth.forms import UserCreationForm,AuthenticationForm
#
#from django.contrib.auth.models import User
#from django.contrib.auth import login,logout,authenticate
#
#from django.db import IntegrityError
#
#def loginuser(request):
#	dic = {}
#	dic['form'] = AuthenticationForm()
#	if request.method == 'GET':
#		return render(request,'todo/loginuser.html',dic)
#	else:
#		user = authenticate(request,username =request.POST['username'],password=request.POST['password'])
#		if user is None:
#			dic['error'] = "username and password did not match"
#		else:
#			login(request,user)
#			return redirect('home')
#
#		return render(request,'todo/loginuser.html',dic)


endsnippet


# options im-> inword
snippet log_out "for logging out from a page"

#from django.shortcuts import render, redirect
#from django.contrib.auth.forms import UserCreationForm,AuthenticationForm
#
#from django.contrib.auth.models import User
#from django.contrib.auth import login,logout,authenticate
#
#from django.db import IntegrityError

#def logoutuser(request):
#	if request.method == 'POST':
#		logout(request)
#		return redirect('home')

endsnippet

# options im-> inword
snippet appsHelp "for help on the MainAppFolder"
# from django.apps import AppConfig
# 
# 
# class MainappConfig(AppConfig):
# 	default_auto_field = 'django.db.models.BigAutoField'
# 	name = 'MainApp'
# then on the INSTALLED_APPS use the default_auto_field name
endsnippet

# options im-> inword
snippet urlsHelp "for help in importing directories"
# first create the file urls in the app

# import the views from the same directorie

# from . import views
# from django.urls import path
#
# urlpatterns = [
#		path('inicio/',views.index,name='index'),
#		]

endsnippet

# options im-> inword
snippet forms_help "for registering a user in the database"
# from django import forms
# 
# from django.core import validators
# 
# from django.contrib.auth.forms import UserCreationForm
# from django.contrib.auth.models import User
# 
# class RegisterForm(UserCreationForm):
# 	class Meta:
# 		model = User
# 		fields = ['username','email','first_name','last_name','password1','password2']
endsnippet

# options im-> inword
snippet html_template "for creating an html template"
# inside the MainAppFolder
# create the folder templates/layouts/
# create the file layout.html and use the snippet html_template
# create the file static/css for the right design in the page


# create the pages app and inside it create the context_processors.py file
inside it place 

# from pages.models import Page
# 
# def get_pages(request):
# 
# 	temp = Page.objects.values_list('id','title','slug','visible').order_by('order')
# 	pages = []
# 	for i in range(len(temp)):
# 		if temp[i][3] == True:
# 			pages.append(temp[i])
# 
# 
# 	return {
# 			'pages' : pages
# 			}

to get the pages glbally for the whole project inside html files
endsnippet

# options im-> inword
snippet register "for registering "

##signupuser Create your views here.
#def signupuser(request):
#	dic = {}
#	dic['form'] = UserCreationForm()
#	if request.method == 'GET':
#		return render(request,'todo/signupuser.html',dic)
#	else:
#		if request.POST['password1'] == request.POST['password2']:
#			try:
#				user = User.objects.create_user(request.POST['username'],password=request.POST['password1'])
#				user.save()
#				login(request,user)
#				return redirect('currenttodos')
#
#			except IntegrityError:
#				dic['error'] = "this user already exists in the database"
#				return render(request,'todo/signupuser.html',dic)
#		else:
#			dic['error'] = "Passwords didn't match"
#			return render(request,'todo/signupuser.html',dic)
#
# use the html snippet for registering
endsnippet

# options im-> inword
snippet getSqlObject "for getting an sql object"

# Create your views here.
from .models import ${1:the_table_class}

# inside a view
	${2:objectName} = $1.objects.get(${3:condition})
endsnippet

# options im-> inword
snippet django_createTable "for creating a table"

from ckeditor.fields import RichTextField
# import the user table
from django.contrib.auth.models import User

# # table named Category 
# class Category(models.Model):
# 	name = models.CharField(max_length=100,verbose_name="Nombre")
# 	description = models.CharField(max_length=255,verbose_name = "Description")
# 	created_at = models.DateTimeField(auto_now_add=True,verbose_name = "Descripción")
# 
# 	# the displayed information in django admin page
# 	class Meta:
# 		verbose_name = "Categoria"
# 		verbose_name_plural = "categorias"
# 	
# 	# the name to be printed
# 	def __str__(self):
# 		return self.name
# 
# class Article(models.Model):
# 	title = models.CharField(max_length=150,verbose_name="Título")
# 	content = RichTextField(verbose_name="Contenido")
# 	image = models.ImageField(default='null',verbose_name="Imagen",upload_to="articles")
# 	public = models.BooleanField(verbose_name="publicado?")
# 	# foreign key to create relationship many to one
# 	user = models.ForeignKey(User,editable=False,verbose_name="Usuario",on_delete=models.CASCADE)
# 	# many to many relationship between Category and Article
# 	categories = models.ManyToManyField(Category,verbose_name='Categorias',blank=True)
# 
# 	created_at = models.DateTimeField(auto_now_add=True,verbose_name="Creado el")
# 	updated_at = models.DateTimeField(auto_now=True,verbose_name="última actualización")
# 
# 
# 	class Meta:
# 		verbose_name = "Articulo"
# 		verbose_name_plural = "Artículos"
# 	
# 	def __str__(self):
# 		return self.title
endsnippet

# options im-> inword
snippet loginRequired "require a log in for a page"

from django.contrib.auth.decorators import login_required

@login_required(login_url="login")
# def page(request,slug):
# 	page = Page.objects.get(slug=slug)
# 	return render(request,"pages/page.html",{
# 		"page": page
# 		}
# )

endsnippet

# options im-> inword
snippet modClassDisplay "for modifications on the django panel search and many others"
# from .models import Category
# class CategoryAdmin(admin.ModelAdmin):
# 	readonly_fieds = ('created_at','updated_at')
# 	search_fields = ('name','description')
# 	list_display = ('name','created_at')
# class ArticleAdmin(admin.ModelAdmin):
# 	readonly_fieds = ('user','created_at','updated_at')
# 	search_fields = ('title','content','user__username','categories__name')
# 	list_display = ('title','user','public','created_at')
# 	list_filter = ('public','user__username','categories__name')

#

# 	def save_model(self,request,obj,form,change):
# 		if not obj.user_id:
# 			obj.user_id = request.user.id
# 		obj.save()

#

# admin.site.register(Category,CategoryAdmin)
# admin.site.register(Article,ArticleAdmin)



endsnippet



# ==========================
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ========== BasesDeDatos ======
# ==========================

snippet insertIfne
-- insert query
insert into ${1:tableName}(${2:name,actionDescription}) values(${3:"alert","gives a personalized voice alert for the system"})
SELECT ${4:row_to_compare}
FROM $1
WHERE NOT($4 IN (SELECT $4 FROM $1));
endsnippet







snippet describe
describe $1 ;
endsnippet







# ==========================
# ========== sql basic syntax ======
# ==========================
snippet compHelp
-- <,>,<=,>=,=,
-- != equal <>
-- and,or
endsnippet

snippet wildCards
-- % -> A substitude for 0 or more characters
-- _ -> a substitude for a single character
-- [charlist] -> sets and ranges for characters to match
endsnippet

snippet bjoin
select ${1:table.col,table.col}
from table
join ${2:second_table}
on employee.id == branch.id;
-- left join if you want to see all
endsnippet
# ==========================
# ========== queries ======
# ==========================

snippet showTables
show tables ;
endsnippet
snippet showUsers
SELECT User FROM mysql.user ;
endsnippet

snippet showAll
select * from $1 ;
endsnippet

# options im-> inword
snippet showCurUser ""
select user() ;
endsnippet
# ==========================
# ========== databases ======
# ==========================

# options im-> inword
snippet createDatabase "for creating a database"
create database ${1:name_of_database} ;
endsnippet
# options im-> inword
snippet deleteDatabase "for deleting a database"
drop database ${1:is exists} ${2:name_of_database}
endsnippet
# options im-> inword
snippet grantAll "grant all privileges to user over database"
-- use it on the terminal as sudo
-- sudo mariadb
grant all privileges on ${1:database_name}.* to '${2:username}'@${3:localhost} ;
endsnippet
# options im-> inword
snippet showPrivileges "to show the privileges"
show grants for '${1:username}'@'${2:localhost} ;
endsnippet
# options im-> inword
snippet showColumn "for showing the specified column"
select ${1:list,of,columns}
from student
${2:[ order by (list of columns)]}
;
endsnippet

snippet columnConditions
-- select * 
-- from ${column}
-- where name in ('name1','name2')
-- limit 5;
endsnippet

snippet countVal
select count(${1:column})
from ${2:table}
-- [where conditions]
;
endsnippet

snippet average
select avg(${1:column})
from ${2:table}
-- [ where conditions]
-- [ group by column ]
endsnippet


# options im-> inword
snippet bunion "merge two queries into one"
-- select column
-- from employee
-- union
-- select branch_name
-- from branch
endsnippet
# options im-> inword
snippet helpUsers "for getting help on the users"
# the user that is been used when login normally is the '' user
endsnippet
# ==========================
# ========== table modifications ======
# ==========================

snippet foreign
foreign key (${1:name_of_key_in_this_table}) references ${2:foreign_table}(${3:value_in_foreing_table})
endsnippet

snippet createTable

create table if not exists ${1:table_name}(
	$2
);
endsnippet
# options im-> inword
snippet helpTable "for help on the table creating and deletion"

-- data types -> varchar(n),Int,DECIMAL(M,N),BLOB,DATE,TIMESTAMP,float
-- float is variable and decimal is fixed
-- use float always
-- constrains -> not null,unique,auto_increment,default 'val'
-- on delete -> on delete set null, on delete cascade
-- snippets -> foreign,

-- EXAMPLE
-- student_id INT,
-- name VARCHAR(20) not null,
-- major VARCHAR(20) unique,
-- primary key(student_id)
-- foreign key(student_id) references branch(branch_id) on delete cascade
endsnippet

snippet deltable
drop table ${1:table_name}
endsnippet

snippet addRow
alter table ${1:name_of_table} add ${2:name varchar(100)}
endsnippet

snippet modTable
-- alter table name_of_table
-- add foreign key(branch_id)
-- references branch(branch_id)
-- on delete set null;
endsnippet
# ==========================
# ========== data modification ======
# ==========================

snippet insert
insert into ${1:table_name}(${2:info,action,name,weeks,action_time,hour,minute}) values(${3:"test info","test action","test name",1,10,12,30}) ;
endsnippet

# options im-> inword
snippet update "update the data" 
-- see compHelp
update ${1:table_name}
set ${2:column_name} = ${3:value}
-- you can separate this by commas
-- ex: name='tom',name='jon'
where ${4:condition} ;
endsnippet

snippet deleteRow
-- to delete a row from the table
delete from ${1:name_of_table} where ${2:condition} ;
endsnippet
# ==========================
# ========== triggers ======
# ==========================

snippet trigger
create table ${1:trigger test} (
	message varchar(100)
	);
endsnippet


