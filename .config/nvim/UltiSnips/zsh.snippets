# forFolder -- traverse folder non recursive
# ifFolder -- check if argument is a folder
# ifFile -- check if argument is a file
# function
# sk 
# info
# traverse folder recursive
# recurseFolder -- recurse folder
# compareFile -- compare file names
snippet compareFile
# "$1" == *.cpp
endsnippet

snippet recurseFolder
recurseFolder(){
	# :h for name only
	# :t for name with extension
	for file in \$1/* ; do
		if [[ -d $file ]]
		then
			recurseFolder $file
		else
			${1:echo " file $file"}
		fi
	done
}
endsnippet

snippet sk
###############################
# Fecha: `date +%d/%B/%Y\ -\ %A`
# Autor: Virgilio Murillo Ochoa
# personal github: Virgilio-AI
# linkedin: https://www.linkedin.com/in/virgilio-murillo-ochoa-b29b59203
# contact: virgiliomurilloochoa1@gmail.com
# #########################################
endsnippet

snippet info
# #############################
# Fecha: `date +%d/%B/%Y\ -\ %A`
# Autor: Virgilio Murillo Ochoa
# personal github: Virgilio-AI
# linkedin: https://www.linkedin.com/in/virgilio-murillo-ochoa-b29b59203
# contact: virgiliomurilloochoa1@gmail.com
# ############################
endsnippet

snippet function
${1:name}(){
	$2
}
endsnippet

snippet ifFolder
if [[ -d $file ]]
then
	${2:echo " folder "}
fi
endsnippet

snippet ifFile
if [[ -f $file ]]
then
	${1:echo "file"}
fi
endsnippet

snippet forFolder
# :h for name only
# :t for name with extension
for ${1:file} in ${2:\$1/*} ; do
	${3:echo "\$file:t" # for filename only}
done
endsnippet

snippet forstring
for ${1:char_it} in \$( echo \$${2:str} )
do
	$3
done
endsnippet
snippet if
if [[ $1 ]]
then
	$2
fi
endsnippet


